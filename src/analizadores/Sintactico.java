
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import analizadores.Ventana;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\004\000\002\007\004" +
    "\000\002\031\005\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\003\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\023\005\000\002\023\007" +
    "\000\002\023\003\000\002\022\006\000\002\022\004\000" +
    "\002\022\003\000\002\030\004\000\002\021\003\000\002" +
    "\020\004\000\002\020\003\000\002\017\010\000\002\016" +
    "\004\000\002\016\003\000\002\016\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\003\000\002\015\003\000" +
    "\002\011\006\000\002\011\010\000\002\012\005\000\002" +
    "\012\007\000\002\005\005\000\002\005\005\000\002\006" +
    "\005\000\002\006\005\000\002\025\003\000\002\025\003" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\004\053\005\001\002\000\004\002\265\001" +
    "\002\000\054\012\010\020\036\022\037\026\011\027\034" +
    "\030\050\031\040\051\035\060\006\061\020\062\042\063" +
    "\024\065\007\067\047\070\015\071\026\073\017\075\045" +
    "\100\033\101\016\102\014\001\002\000\104\004\115\005" +
    "\062\006\064\007\104\010\106\014\111\015\055\016\066" +
    "\017\060\021\077\024\105\033\072\034\113\035\057\036" +
    "\110\040\063\041\073\042\071\043\054\044\067\045\076" +
    "\051\070\052\100\055\114\056\112\057\061\064\075\066" +
    "\103\067\074\072\101\074\102\105\065\106\056\001\002" +
    "\000\004\051\261\001\002\000\056\012\uffca\020\uffca\022" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\051\uffca\054\uffca" +
    "\060\uffca\061\uffca\062\uffca\063\uffca\065\uffca\067\uffca\070" +
    "\uffca\071\uffca\073\uffca\075\uffca\100\uffca\101\uffca\102\uffca" +
    "\001\002\000\104\004\115\005\062\006\064\007\104\010" +
    "\106\014\111\015\055\016\066\017\060\021\077\024\105" +
    "\033\072\034\113\035\057\036\110\040\063\041\073\042" +
    "\071\043\054\044\067\045\076\051\070\052\100\055\114" +
    "\056\112\057\061\064\075\066\103\067\074\072\101\074" +
    "\102\105\065\106\056\001\002\000\004\054\257\001\002" +
    "\000\056\012\010\020\036\022\037\026\011\027\034\030" +
    "\050\031\040\051\035\054\ufff2\060\006\061\020\062\042" +
    "\063\024\065\007\067\047\070\015\071\026\073\017\075" +
    "\045\100\033\101\016\102\014\001\002\000\056\012\uffcd" +
    "\020\uffcd\022\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\051" +
    "\uffcd\054\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\065\uffcd" +
    "\067\uffcd\070\uffcd\071\uffcd\073\uffcd\075\uffcd\100\uffcd\101" +
    "\uffcd\102\uffcd\001\002\000\056\012\uffcf\020\uffcf\022\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\051\uffcf\054\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf\067\uffcf\070\uffcf" +
    "\071\uffcf\073\uffcf\075\uffcf\100\uffcf\101\uffcf\102\uffcf\001" +
    "\002\000\056\012\uffd4\020\uffd4\022\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\051\uffd4\054\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\065\uffd4\067\uffd4\070\uffd4\071\uffd4\073\uffd4" +
    "\075\uffd4\100\uffd4\101\uffd4\102\uffd4\001\002\000\104\004" +
    "\115\005\062\006\064\007\104\010\106\014\111\015\055" +
    "\016\066\017\060\021\077\024\105\033\072\034\113\035" +
    "\057\036\110\040\063\041\073\042\071\043\054\044\067" +
    "\045\076\051\070\052\100\055\114\056\112\057\061\064" +
    "\075\066\103\067\074\072\101\074\102\105\065\106\056" +
    "\001\002\000\104\004\115\005\062\006\064\007\104\010" +
    "\106\014\111\015\055\016\066\017\060\021\077\024\105" +
    "\033\072\034\113\035\057\036\110\040\063\041\073\042" +
    "\071\043\054\044\067\045\076\051\070\052\100\055\114" +
    "\056\112\057\061\064\075\066\103\067\074\072\101\074" +
    "\102\105\065\106\056\001\002\000\056\012\010\020\036" +
    "\022\037\026\011\027\034\030\050\031\040\051\035\054" +
    "\ufffa\060\006\061\020\062\042\063\024\065\007\067\047" +
    "\070\015\071\026\073\017\075\045\100\033\101\016\102" +
    "\014\001\002\000\056\012\010\020\036\022\037\026\011" +
    "\027\034\030\050\031\040\051\035\054\uffea\060\006\061" +
    "\020\062\042\063\024\065\007\067\047\070\015\071\026" +
    "\073\017\075\045\100\033\101\016\102\014\001\002\000" +
    "\056\012\010\020\036\022\037\026\011\027\034\030\050" +
    "\031\040\051\035\054\uffee\060\006\061\020\062\042\063" +
    "\024\065\007\067\047\070\015\071\026\073\017\075\045" +
    "\100\033\101\016\102\014\001\002\000\104\004\115\005" +
    "\062\006\064\007\104\010\106\014\111\015\055\016\066" +
    "\017\060\021\077\024\105\033\072\034\113\035\057\036" +
    "\110\040\063\041\073\042\071\043\054\044\067\045\076" +
    "\051\070\052\100\055\114\056\112\057\061\064\075\066" +
    "\103\067\074\072\101\074\102\105\065\106\056\001\002" +
    "\000\056\012\010\020\036\022\037\026\011\027\034\030" +
    "\050\031\040\051\035\054\uffec\060\006\061\020\062\042" +
    "\063\024\065\007\067\047\070\015\071\026\073\017\075" +
    "\045\100\033\101\016\102\014\001\002\000\004\051\214" +
    "\001\002\000\056\012\010\020\036\022\037\026\011\027" +
    "\034\030\050\031\040\051\035\054\ufff8\060\006\061\020" +
    "\062\042\063\024\065\007\067\047\070\015\071\026\073" +
    "\017\075\045\100\033\101\016\102\014\001\002\000\056" +
    "\012\010\020\036\022\037\026\011\027\034\030\050\031" +
    "\040\051\035\054\ufffc\060\006\061\020\062\042\063\024" +
    "\065\007\067\047\070\015\071\026\073\017\075\045\100" +
    "\033\101\016\102\014\001\002\000\056\012\010\020\036" +
    "\022\037\026\011\027\034\030\050\031\040\051\035\054" +
    "\ufffe\060\006\061\020\062\042\063\024\065\007\067\047" +
    "\070\015\071\026\073\017\075\045\100\033\101\016\102" +
    "\014\001\002\000\056\012\010\020\036\022\037\026\011" +
    "\027\034\030\050\031\040\051\035\054\ufff6\060\006\061" +
    "\020\062\042\063\024\065\007\067\047\070\015\071\026" +
    "\073\017\075\045\100\033\101\016\102\014\001\002\000" +
    "\056\012\uffd1\020\uffd1\022\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\051\uffd1\054\uffd1\060\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\065\uffd1\067\uffd1\070\uffd1\071\uffd1\073\uffd1\075\uffd1" +
    "\100\uffd1\101\uffd1\102\uffd1\001\002\000\104\004\115\005" +
    "\062\006\064\007\104\010\106\014\111\015\055\016\066" +
    "\017\060\021\077\024\105\033\072\034\113\035\057\036" +
    "\110\040\063\041\073\042\071\043\054\044\067\045\076" +
    "\051\070\052\100\055\114\056\112\057\061\064\075\066" +
    "\103\067\074\072\101\074\102\105\065\106\056\001\002" +
    "\000\006\011\176\041\177\001\002\000\004\051\160\001" +
    "\002\000\104\004\115\005\062\006\064\007\104\010\106" +
    "\014\111\015\055\016\066\017\060\021\077\024\105\033" +
    "\072\034\113\035\057\036\110\040\063\041\073\042\071" +
    "\043\054\044\067\045\076\051\070\052\100\055\114\056" +
    "\112\057\061\064\075\066\103\067\074\072\101\074\102" +
    "\105\065\106\056\001\002\000\056\012\uffc6\020\uffc6\022" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\051\uffc6\054\uffc6" +
    "\060\uffc6\061\uffc6\062\uffc6\063\uffc6\065\uffc6\067\uffc6\070" +
    "\uffc6\071\uffc6\073\uffc6\075\uffc6\100\uffc6\101\uffc6\102\uffc6" +
    "\001\002\000\056\012\010\020\036\022\037\026\011\027" +
    "\034\030\050\031\040\051\035\054\uffe4\060\006\061\020" +
    "\062\042\063\024\065\007\067\047\070\015\071\026\073" +
    "\017\075\045\100\033\101\016\102\014\001\002\000\104" +
    "\004\115\005\062\006\064\007\104\010\106\014\111\015" +
    "\055\016\066\017\060\021\077\024\105\033\072\034\113" +
    "\035\057\036\110\040\063\041\073\042\071\043\054\044" +
    "\067\045\076\051\070\052\100\055\114\056\112\057\061" +
    "\064\075\066\103\067\074\072\101\074\102\105\065\106" +
    "\056\001\002\000\056\012\010\020\036\022\037\026\011" +
    "\027\034\030\050\031\040\051\035\054\uffe6\060\006\061" +
    "\020\062\042\063\024\065\007\067\047\070\015\071\026" +
    "\073\017\075\045\100\033\101\016\102\014\001\002\000" +
    "\056\012\010\020\036\022\037\026\011\027\034\030\050" +
    "\031\040\051\035\054\uffe8\060\006\061\020\062\042\063" +
    "\024\065\007\067\047\070\015\071\026\073\017\075\045" +
    "\100\033\101\016\102\014\001\002\000\104\004\115\005" +
    "\062\006\064\007\104\010\106\014\111\015\055\016\066" +
    "\017\060\021\077\024\105\033\072\034\113\035\057\036" +
    "\110\040\063\041\073\042\071\043\054\044\067\045\076" +
    "\051\070\052\100\055\114\056\112\057\061\064\075\066" +
    "\103\067\074\072\101\074\102\105\065\106\056\001\002" +
    "\000\056\012\010\020\036\022\037\026\011\027\034\030" +
    "\050\031\040\051\035\054\ufff0\060\006\061\020\062\042" +
    "\063\024\065\007\067\047\070\015\071\026\073\017\075" +
    "\045\100\033\101\016\102\014\001\002\000\056\012\uffc5" +
    "\020\uffc5\022\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\051" +
    "\uffc5\054\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\065\uffc5" +
    "\067\uffc5\070\uffc5\071\uffc5\073\uffc5\075\uffc5\100\uffc5\101" +
    "\uffc5\102\uffc5\001\002\000\004\051\053\001\002\000\056" +
    "\012\010\020\036\022\037\026\011\027\034\030\050\031" +
    "\040\051\035\054\ufff4\060\006\061\020\062\042\063\024" +
    "\065\007\067\047\070\015\071\026\073\017\075\045\100" +
    "\033\101\016\102\014\001\002\000\004\054\ufff5\001\002" +
    "\000\104\004\115\005\062\006\064\007\104\010\106\014" +
    "\111\015\055\016\066\017\060\021\077\024\105\033\072" +
    "\034\113\035\057\036\110\040\063\041\073\042\071\043" +
    "\054\044\067\045\076\051\070\052\100\055\114\056\112" +
    "\057\061\064\075\066\103\067\074\072\101\074\102\105" +
    "\065\106\056\001\002\000\104\004\115\005\062\006\064" +
    "\007\104\010\106\014\111\015\055\016\066\017\060\021" +
    "\077\024\105\033\072\034\113\035\057\036\110\040\063" +
    "\041\073\042\071\043\054\044\067\045\076\051\070\052" +
    "\100\055\114\056\112\057\061\064\075\066\103\067\074" +
    "\072\101\074\102\105\065\106\056\001\002\000\104\004" +
    "\115\005\062\006\064\007\104\010\106\014\111\015\055" +
    "\016\066\017\060\021\077\024\105\033\072\034\113\035" +
    "\057\036\110\040\063\041\073\042\071\043\054\044\067" +
    "\045\076\051\070\052\100\055\114\056\112\057\061\064" +
    "\075\066\103\067\074\072\101\074\102\105\065\106\056" +
    "\001\002\000\062\011\uffbc\012\uffbc\020\uffbc\022\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\051\uffbc\054\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\063\uffbc\065\uffbc\067\uffbc\070" +
    "\uffbc\071\uffbc\073\uffbc\075\uffbc\100\uffbc\101\uffbc\102\uffbc" +
    "\001\002\000\104\004\115\005\062\006\064\007\104\010" +
    "\106\014\111\015\055\016\066\017\060\021\077\024\105" +
    "\033\072\034\113\035\057\036\110\040\063\041\073\042" +
    "\071\043\054\044\067\045\076\051\070\052\100\055\114" +
    "\056\112\057\061\064\075\066\103\067\074\072\101\074" +
    "\102\105\065\106\056\001\002\000\104\004\115\005\062" +
    "\006\064\007\104\010\106\014\111\015\055\016\066\017" +
    "\060\021\077\024\105\033\072\034\113\035\057\036\110" +
    "\040\063\041\073\042\071\043\054\044\067\045\076\051" +
    "\070\052\100\055\114\056\112\057\061\064\075\066\103" +
    "\067\074\072\101\074\102\105\065\106\056\001\002\000" +
    "\104\004\115\005\062\006\064\007\104\010\106\014\111" +
    "\015\055\016\066\017\060\021\077\024\105\033\072\034" +
    "\113\035\057\036\110\040\063\041\073\042\071\043\054" +
    "\044\067\045\076\051\070\052\100\055\114\056\112\057" +
    "\061\064\075\066\103\067\074\072\101\074\102\105\065" +
    "\106\056\001\002\000\104\004\115\005\062\006\064\007" +
    "\104\010\106\014\111\015\055\016\066\017\060\021\077" +
    "\024\105\033\072\034\113\035\057\036\110\040\063\041" +
    "\073\042\071\043\054\044\067\045\076\051\070\052\100" +
    "\055\114\056\112\057\061\064\075\066\103\067\074\072" +
    "\101\074\102\105\065\106\056\001\002\000\104\004\115" +
    "\005\062\006\064\007\104\010\106\014\111\015\055\016" +
    "\066\017\060\021\077\024\105\033\072\034\113\035\057" +
    "\036\110\040\063\041\073\042\071\043\054\044\067\045" +
    "\076\051\070\052\100\055\114\056\112\057\061\064\075" +
    "\066\103\067\074\072\101\074\102\105\065\106\056\001" +
    "\002\000\104\004\115\005\062\006\064\007\104\010\106" +
    "\014\111\015\055\016\066\017\060\021\077\024\105\033" +
    "\072\034\113\035\057\036\110\040\063\041\073\042\071" +
    "\043\054\044\067\045\076\051\070\052\100\055\114\056" +
    "\112\057\061\064\075\066\103\067\074\072\101\074\102" +
    "\105\065\106\056\001\002\000\062\011\uffbb\012\uffbb\020" +
    "\uffbb\022\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\051\uffbb\054\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\065" +
    "\uffbb\067\uffbb\070\uffbb\071\uffbb\073\uffbb\075\uffbb\100\uffbb" +
    "\101\uffbb\102\uffbb\001\002\000\104\004\115\005\062\006" +
    "\064\007\104\010\106\014\111\015\055\016\066\017\060" +
    "\021\077\024\105\033\072\034\113\035\057\036\110\040" +
    "\063\041\073\042\071\043\054\044\067\045\076\051\070" +
    "\052\100\055\114\056\112\057\061\064\075\066\103\067" +
    "\074\072\101\074\102\105\065\106\056\001\002\000\104" +
    "\004\115\005\062\006\064\007\104\010\106\014\111\015" +
    "\055\016\066\017\060\021\077\024\105\033\072\034\113" +
    "\035\057\036\110\040\063\041\073\042\071\043\054\044" +
    "\067\045\076\051\070\052\100\055\114\056\112\057\061" +
    "\064\075\066\103\067\074\072\101\074\102\105\065\106" +
    "\056\001\002\000\104\004\115\005\062\006\064\007\104" +
    "\010\106\014\111\015\055\016\066\017\060\021\077\024" +
    "\105\033\072\034\113\035\057\036\110\040\063\041\073" +
    "\042\071\043\054\044\067\045\076\051\070\052\100\055" +
    "\114\056\112\057\061\064\075\066\103\067\074\072\101" +
    "\074\102\105\065\106\056\001\002\000\104\004\115\005" +
    "\062\006\064\007\104\010\106\014\111\015\055\016\066" +
    "\017\060\021\077\024\105\033\072\034\113\035\057\036" +
    "\110\040\063\041\073\042\071\043\054\044\067\045\076" +
    "\051\070\052\100\055\114\056\112\057\061\064\075\066" +
    "\103\067\074\072\101\074\102\105\065\106\056\001\002" +
    "\000\104\004\115\005\062\006\064\007\104\010\106\014" +
    "\111\015\055\016\066\017\060\021\077\024\105\033\072" +
    "\034\113\035\057\036\110\040\063\041\073\042\071\043" +
    "\054\044\067\045\076\051\070\052\100\055\114\056\112" +
    "\057\061\064\075\066\103\067\074\072\101\074\102\105" +
    "\065\106\056\001\002\000\104\004\115\005\062\006\064" +
    "\007\104\010\106\014\111\015\055\016\066\017\060\021" +
    "\077\024\105\033\072\034\113\035\057\036\110\040\063" +
    "\041\073\042\071\043\054\044\067\045\076\051\070\052" +
    "\100\055\114\056\112\057\061\064\075\066\103\067\074" +
    "\072\101\074\102\105\065\106\056\001\002\000\062\011" +
    "\uff9d\012\uff9d\020\uff9d\022\uff9d\026\uff9d\027\uff9d\030\uff9d" +
    "\031\uff9d\032\uff9d\051\uff9d\054\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\065\uff9d\067\uff9d\070\uff9d\071\uff9d\073\uff9d" +
    "\075\uff9d\100\uff9d\101\uff9d\102\uff9d\001\002\000\062\011" +
    "\uff9e\012\uff9e\020\uff9e\022\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\051\uff9e\054\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\063\uff9e\065\uff9e\067\uff9e\070\uff9e\071\uff9e\073\uff9e" +
    "\075\uff9e\100\uff9e\101\uff9e\102\uff9e\001\002\000\104\004" +
    "\115\005\062\006\064\007\104\010\106\014\111\015\055" +
    "\016\066\017\060\021\077\024\105\033\072\034\113\035" +
    "\057\036\110\040\063\041\073\042\071\043\054\044\067" +
    "\045\076\051\070\052\100\055\114\056\112\057\061\064" +
    "\075\066\103\067\074\072\101\074\102\105\065\106\056" +
    "\001\002\000\104\004\115\005\062\006\064\007\104\010" +
    "\106\014\111\015\055\016\066\017\060\021\077\024\105" +
    "\033\072\034\113\035\057\036\110\040\063\041\073\042" +
    "\071\043\054\044\067\045\076\051\070\052\100\055\114" +
    "\056\112\057\061\064\075\066\103\067\074\072\101\074" +
    "\102\105\065\106\056\001\002\000\104\004\115\005\062" +
    "\006\064\007\104\010\106\014\111\015\055\016\066\017" +
    "\060\021\077\024\105\033\072\034\113\035\057\036\110" +
    "\040\063\041\073\042\071\043\054\044\067\045\076\051" +
    "\070\052\100\055\114\056\112\057\061\064\075\066\103" +
    "\067\074\072\101\074\102\105\065\106\056\001\002\000" +
    "\062\011\uff9f\012\uff9f\020\uff9f\022\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\051\uff9f\054\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\065\uff9f\067\uff9f\070\uff9f\071\uff9f" +
    "\073\uff9f\075\uff9f\100\uff9f\101\uff9f\102\uff9f\001\002\000" +
    "\104\004\115\005\062\006\064\007\104\010\106\014\111" +
    "\015\055\016\066\017\060\021\077\024\105\033\072\034" +
    "\113\035\057\036\110\040\063\041\073\042\071\043\054" +
    "\044\067\045\076\051\070\052\100\055\114\056\112\057" +
    "\061\064\075\066\103\067\074\072\101\074\102\105\065" +
    "\106\056\001\002\000\104\004\115\005\062\006\064\007" +
    "\104\010\106\014\111\015\055\016\066\017\060\021\077" +
    "\024\105\033\072\034\113\035\057\036\110\040\063\041" +
    "\073\042\071\043\054\044\067\045\076\051\070\052\100" +
    "\055\114\056\112\057\061\064\075\066\103\067\074\072" +
    "\101\074\102\105\065\106\056\001\002\000\104\004\115" +
    "\005\062\006\064\007\104\010\106\014\111\015\055\016" +
    "\066\017\060\021\077\024\105\033\072\034\113\035\057" +
    "\036\110\040\063\041\073\042\071\043\054\044\067\045" +
    "\076\051\070\052\100\055\114\056\112\057\061\064\075" +
    "\066\103\067\074\072\101\074\102\105\065\106\056\001" +
    "\002\000\104\004\115\005\062\006\064\007\104\010\106" +
    "\014\111\015\055\016\066\017\060\021\077\024\105\033" +
    "\072\034\113\035\057\036\110\040\063\041\073\042\071" +
    "\043\054\044\067\045\076\051\070\052\100\055\114\056" +
    "\112\057\061\064\075\066\103\067\074\072\101\074\102" +
    "\105\065\106\056\001\002\000\104\004\115\005\062\006" +
    "\064\007\104\010\106\014\111\015\055\016\066\017\060" +
    "\021\077\024\105\033\072\034\113\035\057\036\110\040" +
    "\063\041\073\042\071\043\054\044\067\045\076\051\070" +
    "\052\100\055\114\056\112\057\061\064\075\066\103\067" +
    "\074\072\101\074\102\105\065\106\056\001\002\000\056" +
    "\012\uffe1\020\uffe1\022\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\051\uffe1\054\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\065\uffe1\067\uffe1\070\uffe1\071\uffe1\073\uffe1\075\uffe1\100" +
    "\uffe1\101\uffe1\102\uffe1\001\002\000\104\004\115\005\062" +
    "\006\064\007\104\010\106\014\111\015\055\016\066\017" +
    "\060\021\077\024\105\033\072\034\113\035\057\036\110" +
    "\040\063\041\073\042\071\043\054\044\067\045\076\051" +
    "\070\052\100\055\114\056\112\057\061\064\075\066\103" +
    "\067\074\072\101\074\102\105\065\106\056\001\002\000" +
    "\104\004\115\005\062\006\064\007\104\010\106\014\111" +
    "\015\055\016\066\017\060\021\077\024\105\033\072\034" +
    "\113\035\057\036\110\040\063\041\073\042\071\043\054" +
    "\044\067\045\076\051\070\052\100\055\114\056\112\057" +
    "\061\064\075\066\103\067\074\072\101\074\102\105\065" +
    "\106\056\001\002\000\104\004\115\005\062\006\064\007" +
    "\104\010\106\014\111\015\055\016\066\017\060\021\077" +
    "\024\105\033\072\034\113\035\057\036\110\040\063\041" +
    "\073\042\071\043\054\044\067\045\076\051\070\052\100" +
    "\055\114\056\112\057\061\064\075\066\103\067\074\072" +
    "\101\074\102\105\065\106\056\001\002\000\104\004\115" +
    "\005\062\006\064\007\104\010\106\014\111\015\055\016" +
    "\066\017\060\021\077\024\105\033\072\034\113\035\057" +
    "\036\110\040\063\041\073\042\071\043\054\044\067\045" +
    "\076\051\070\052\100\055\114\056\112\057\061\064\075" +
    "\066\103\067\074\072\101\074\102\105\065\106\056\001" +
    "\002\000\104\004\115\005\062\006\064\007\104\010\106" +
    "\014\111\015\055\016\066\017\060\021\077\024\105\033" +
    "\072\034\113\035\057\036\110\040\063\041\073\042\071" +
    "\043\054\044\067\045\076\051\070\052\100\055\114\056" +
    "\112\057\061\064\075\066\103\067\074\072\101\074\102" +
    "\105\065\106\056\001\002\000\062\011\uffa0\012\uffa0\020" +
    "\uffa0\022\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0" +
    "\051\uffa0\054\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\065" +
    "\uffa0\067\uffa0\070\uffa0\071\uffa0\073\uffa0\075\uffa0\100\uffa0" +
    "\101\uffa0\102\uffa0\001\002\000\062\011\uffa1\012\uffa1\020" +
    "\uffa1\022\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\051\uffa1\054\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\065" +
    "\uffa1\067\uffa1\070\uffa1\071\uffa1\073\uffa1\075\uffa1\100\uffa1" +
    "\101\uffa1\102\uffa1\001\002\000\062\011\uffa3\012\uffa3\020" +
    "\uffa3\022\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\051\uffa3\054\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\065" +
    "\uffa3\067\uffa3\070\uffa3\071\uffa3\073\uffa3\075\uffa3\100\uffa3" +
    "\101\uffa3\102\uffa3\001\002\000\062\011\uffa2\012\uffa2\020" +
    "\uffa2\022\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2" +
    "\051\uffa2\054\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\065" +
    "\uffa2\067\uffa2\070\uffa2\071\uffa2\073\uffa2\075\uffa2\100\uffa2" +
    "\101\uffa2\102\uffa2\001\002\000\062\011\uffaa\012\uffaa\020" +
    "\uffaa\022\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\051\uffaa\054\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\065" +
    "\uffaa\067\uffaa\070\uffaa\071\uffaa\073\uffaa\075\uffaa\100\uffaa" +
    "\101\uffaa\102\uffaa\001\002\000\062\011\uffac\012\uffac\020" +
    "\uffac\022\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\051\uffac\054\uffac\060\uffac\061\uffac\062\uffac\063\uffac\065" +
    "\uffac\067\uffac\070\uffac\071\uffac\073\uffac\075\uffac\100\uffac" +
    "\101\uffac\102\uffac\001\002\000\062\011\uffae\012\uffae\020" +
    "\uffae\022\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\051\uffae\054\uffae\060\uffae\061\uffae\062\uffae\063\uffae\065" +
    "\uffae\067\uffae\070\uffae\071\uffae\073\uffae\075\uffae\100\uffae" +
    "\101\uffae\102\uffae\001\002\000\062\011\uffba\012\uffba\020" +
    "\uffba\022\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\051\uffba\054\uffba\060\uffba\061\uffba\062\uffba\063\uffba\065" +
    "\uffba\067\uffba\070\uffba\071\uffba\073\uffba\075\uffba\100\uffba" +
    "\101\uffba\102\uffba\001\002\000\062\011\uffaf\012\uffaf\020" +
    "\uffaf\022\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\051\uffaf\054\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\065" +
    "\uffaf\067\uffaf\070\uffaf\071\uffaf\073\uffaf\075\uffaf\100\uffaf" +
    "\101\uffaf\102\uffaf\001\002\000\062\011\uffb6\012\uffb6\020" +
    "\uffb6\022\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\051\uffb6\054\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\065" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\073\uffb6\075\uffb6\100\uffb6" +
    "\101\uffb6\102\uffb6\001\002\000\062\011\uffb0\012\uffb0\020" +
    "\uffb0\022\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\051\uffb0\054\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\065" +
    "\uffb0\067\uffb0\070\uffb0\071\uffb0\073\uffb0\075\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\001\002\000\062\011\uffad\012\uffad\020" +
    "\uffad\022\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\051\uffad\054\uffad\060\uffad\061\uffad\062\uffad\063\uffad\065" +
    "\uffad\067\uffad\070\uffad\071\uffad\073\uffad\075\uffad\100\uffad" +
    "\101\uffad\102\uffad\001\002\000\062\011\uffb2\012\uffb2\020" +
    "\uffb2\022\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\051\uffb2\054\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\065" +
    "\uffb2\067\uffb2\070\uffb2\071\uffb2\073\uffb2\075\uffb2\100\uffb2" +
    "\101\uffb2\102\uffb2\001\002\000\062\011\uffb1\012\uffb1\020" +
    "\uffb1\022\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\051\uffb1\054\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\065" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\073\uffb1\075\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\001\002\000\062\011\uffa5\012\uffa5\020" +
    "\uffa5\022\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\051\uffa5\054\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\065" +
    "\uffa5\067\uffa5\070\uffa5\071\uffa5\073\uffa5\075\uffa5\100\uffa5" +
    "\101\uffa5\102\uffa5\001\002\000\062\011\uffa4\012\uffa4\020" +
    "\uffa4\022\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\051\uffa4\054\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\065" +
    "\uffa4\067\uffa4\070\uffa4\071\uffa4\073\uffa4\075\uffa4\100\uffa4" +
    "\101\uffa4\102\uffa4\001\002\000\062\011\uffb5\012\uffb5\020" +
    "\uffb5\022\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\051\uffb5\054\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\065" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\073\uffb5\075\uffb5\100\uffb5" +
    "\101\uffb5\102\uffb5\001\002\000\062\011\uffab\012\uffab\020" +
    "\uffab\022\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\051\uffab\054\uffab\060\uffab\061\uffab\062\uffab\063\uffab\065" +
    "\uffab\067\uffab\070\uffab\071\uffab\073\uffab\075\uffab\100\uffab" +
    "\101\uffab\102\uffab\001\002\000\062\011\uffb3\012\uffb3\020" +
    "\uffb3\022\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\051\uffb3\054\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\065" +
    "\uffb3\067\uffb3\070\uffb3\071\uffb3\073\uffb3\075\uffb3\100\uffb3" +
    "\101\uffb3\102\uffb3\001\002\000\062\011\uffa9\012\uffa9\020" +
    "\uffa9\022\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\051\uffa9\054\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\065" +
    "\uffa9\067\uffa9\070\uffa9\071\uffa9\073\uffa9\075\uffa9\100\uffa9" +
    "\101\uffa9\102\uffa9\001\002\000\062\011\uffa6\012\uffa6\020" +
    "\uffa6\022\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\051\uffa6\054\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\065" +
    "\uffa6\067\uffa6\070\uffa6\071\uffa6\073\uffa6\075\uffa6\100\uffa6" +
    "\101\uffa6\102\uffa6\001\002\000\062\011\uffb9\012\uffb9\020" +
    "\uffb9\022\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\051\uffb9\054\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\065" +
    "\uffb9\067\uffb9\070\uffb9\071\uffb9\073\uffb9\075\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\001\002\000\062\011\uffa7\012\uffa7\020" +
    "\uffa7\022\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\051\uffa7\054\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\065" +
    "\uffa7\067\uffa7\070\uffa7\071\uffa7\073\uffa7\075\uffa7\100\uffa7" +
    "\101\uffa7\102\uffa7\001\002\000\062\011\uff9c\012\uff9c\020" +
    "\uff9c\022\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\051\uff9c\054\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\065" +
    "\uff9c\067\uff9c\070\uff9c\071\uff9c\073\uff9c\075\uff9c\100\uff9c" +
    "\101\uff9c\102\uff9c\001\002\000\062\011\uffa8\012\uffa8\020" +
    "\uffa8\022\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\051\uffa8\054\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\065" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\073\uffa8\075\uffa8\100\uffa8" +
    "\101\uffa8\102\uffa8\001\002\000\062\011\uffb7\012\uffb7\020" +
    "\uffb7\022\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\051\uffb7\054\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\065" +
    "\uffb7\067\uffb7\070\uffb7\071\uffb7\073\uffb7\075\uffb7\100\uffb7" +
    "\101\uffb7\102\uffb7\001\002\000\062\011\uffb8\012\uffb8\020" +
    "\uffb8\022\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\051\uffb8\054\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\065" +
    "\uffb8\067\uffb8\070\uffb8\071\uffb8\073\uffb8\075\uffb8\100\uffb8" +
    "\101\uffb8\102\uffb8\001\002\000\062\011\uffb4\012\uffb4\020" +
    "\uffb4\022\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\051\uffb4\054\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\065" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\073\uffb4\075\uffb4\100\uffb4" +
    "\101\uffb4\102\uffb4\001\002\000\004\054\ufff1\001\002\000" +
    "\056\012\uffce\020\uffce\022\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\051\uffce\054\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\065\uffce\067\uffce\070\uffce\071\uffce\073\uffce\075\uffce" +
    "\100\uffce\101\uffce\102\uffce\001\002\000\004\054\uffe9\001" +
    "\002\000\004\054\uffe7\001\002\000\056\012\uffc7\020\uffc7" +
    "\022\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\051\uffc7\054" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\065\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\073\uffc7\075\uffc7\100\uffc7\101\uffc7\102" +
    "\uffc7\001\002\000\004\054\uffe5\001\002\000\056\012\uffc9" +
    "\020\uffc9\022\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\051" +
    "\uffc9\054\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\065\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\073\uffc9\075\uffc9\100\uffc9\101" +
    "\uffc9\102\uffc9\001\002\000\006\025\162\041\161\001\002" +
    "\000\004\051\166\001\002\000\004\047\163\001\002\000" +
    "\004\037\164\001\002\000\104\004\115\005\062\006\064" +
    "\007\104\010\106\014\111\015\055\016\066\017\060\021" +
    "\077\024\105\033\072\034\113\035\057\036\110\040\063" +
    "\041\073\042\071\043\054\044\067\045\076\051\070\052" +
    "\100\055\114\056\112\057\061\064\075\066\103\067\074" +
    "\072\101\074\102\105\065\106\056\001\002\000\056\012" +
    "\uffc3\020\uffc3\022\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\051\uffc3\054\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\065" +
    "\uffc3\067\uffc3\070\uffc3\071\uffc3\073\uffc3\075\uffc3\100\uffc3" +
    "\101\uffc3\102\uffc3\001\002\000\006\025\171\041\170\001" +
    "\002\000\056\012\uffc4\020\uffc4\022\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\051\uffc4\054\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\065\uffc4\067\uffc4\070\uffc4\071\uffc4\073\uffc4" +
    "\075\uffc4\100\uffc4\101\uffc4\102\uffc4\001\002\000\004\051" +
    "\166\001\002\000\004\047\172\001\002\000\004\037\173" +
    "\001\002\000\104\004\115\005\062\006\064\007\104\010" +
    "\106\014\111\015\055\016\066\017\060\021\077\024\105" +
    "\033\072\034\113\035\057\036\110\040\063\041\073\042" +
    "\071\043\054\044\067\045\076\051\070\052\100\055\114" +
    "\056\112\057\061\064\075\066\103\067\074\072\101\074" +
    "\102\105\065\106\056\001\002\000\056\012\uffc1\020\uffc1" +
    "\022\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\051\uffc1\054" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\065\uffc1\067\uffc1" +
    "\070\uffc1\071\uffc1\073\uffc1\075\uffc1\100\uffc1\101\uffc1\102" +
    "\uffc1\001\002\000\056\012\uffc2\020\uffc2\022\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\051\uffc2\054\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\065\uffc2\067\uffc2\070\uffc2\071\uffc2" +
    "\073\uffc2\075\uffc2\100\uffc2\101\uffc2\102\uffc2\001\002\000" +
    "\104\004\115\005\062\006\064\007\104\010\106\014\111" +
    "\015\055\016\066\017\060\021\077\024\105\033\072\034" +
    "\113\035\057\036\110\040\063\041\073\042\071\043\054" +
    "\044\067\045\076\051\070\052\100\055\114\056\112\057" +
    "\061\064\075\066\103\067\074\072\101\074\102\105\065" +
    "\106\056\001\002\000\004\051\200\001\002\000\006\011" +
    "\203\041\202\001\002\000\056\012\uffc0\020\uffc0\022\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\051\uffc0\054\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\065\uffc0\067\uffc0\070\uffc0" +
    "\071\uffc0\073\uffc0\075\uffc0\100\uffc0\101\uffc0\102\uffc0\001" +
    "\002\000\004\051\200\001\002\000\104\004\115\005\062" +
    "\006\064\007\104\010\106\014\111\015\055\016\066\017" +
    "\060\021\077\024\105\033\072\034\113\035\057\036\110" +
    "\040\063\041\073\042\071\043\054\044\067\045\076\051" +
    "\070\052\100\055\114\056\112\057\061\064\075\066\103" +
    "\067\074\072\101\074\102\105\065\106\056\001\002\000" +
    "\056\012\uffbd\020\uffbd\022\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\051\uffbd\054\uffbd\060\uffbd\061\uffbd\062\uffbd\063" +
    "\uffbd\065\uffbd\067\uffbd\070\uffbd\071\uffbd\073\uffbd\075\uffbd" +
    "\100\uffbd\101\uffbd\102\uffbd\001\002\000\056\012\uffbe\020" +
    "\uffbe\022\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\051\uffbe" +
    "\054\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\065\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\073\uffbe\075\uffbe\100\uffbe\101\uffbe" +
    "\102\uffbe\001\002\000\056\012\uffbf\020\uffbf\022\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\051\uffbf\054\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\065\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\073\uffbf\075\uffbf\100\uffbf\101\uffbf\102\uffbf\001\002" +
    "\000\056\012\uffe2\020\uffe2\022\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\051\uffe2\054\uffe2\060\uffe2\061\uffe2\062\uffe2" +
    "\063\uffe2\065\uffe2\067\uffe2\070\uffe2\071\uffe2\073\uffe2\075" +
    "\uffe2\100\uffe2\101\uffe2\102\uffe2\001\002\000\004\054\ufff7" +
    "\001\002\000\004\054\uffff\001\002\000\004\054\ufffd\001" +
    "\002\000\004\054\ufff9\001\002\000\004\047\215\001\002" +
    "\000\060\012\uffd6\020\uffd6\022\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\051\uffd6\054\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\065\uffd6\067\uffd6\070\uffd6\071\uffd6\073\uffd6\075" +
    "\uffd6\100\uffd6\101\uffd6\102\uffd6\103\216\001\002\000\026" +
    "\005\227\006\231\015\222\024\224\035\220\036\230\040" +
    "\225\041\221\051\223\052\217\001\002\000\104\004\115" +
    "\005\062\006\064\007\104\010\106\014\111\015\055\016" +
    "\066\017\060\021\077\024\105\033\072\034\113\035\057" +
    "\036\110\040\063\041\073\042\071\043\054\044\067\045" +
    "\076\051\070\052\100\055\114\056\112\057\061\064\075" +
    "\066\103\067\074\072\101\074\102\105\065\106\056\001" +
    "\002\000\104\004\115\005\062\006\064\007\104\010\106" +
    "\014\111\015\055\016\066\017\060\021\077\024\105\033" +
    "\072\034\113\035\057\036\110\040\063\041\073\042\071" +
    "\043\054\044\067\045\076\051\070\052\100\055\114\056" +
    "\112\057\061\064\075\066\103\067\074\072\101\074\102" +
    "\105\065\106\056\001\002\000\026\005\227\006\231\015" +
    "\222\024\224\035\220\036\230\040\225\041\221\051\223" +
    "\052\217\001\002\000\104\004\115\005\062\006\064\007" +
    "\104\010\106\014\111\015\055\016\066\017\060\021\077" +
    "\024\105\033\072\034\113\035\057\036\110\040\063\041" +
    "\073\042\071\043\054\044\067\045\076\051\070\052\100" +
    "\055\114\056\112\057\061\064\075\066\103\067\074\072" +
    "\101\074\102\105\065\106\056\001\002\000\026\005\227" +
    "\006\231\015\222\024\224\035\220\036\230\040\225\041" +
    "\221\051\223\052\217\001\002\000\104\004\115\005\062" +
    "\006\064\007\104\010\106\014\111\015\055\016\066\017" +
    "\060\021\077\024\105\033\072\034\113\035\057\036\110" +
    "\040\063\041\073\042\071\043\054\044\067\045\076\051" +
    "\070\052\100\055\114\056\112\057\061\064\075\066\103" +
    "\067\074\072\101\074\102\105\065\106\056\001\002\000" +
    "\104\004\115\005\062\006\064\007\104\010\106\014\111" +
    "\015\055\016\066\017\060\021\077\024\105\033\072\034" +
    "\113\035\057\036\110\040\063\041\073\042\071\043\054" +
    "\044\067\045\076\051\070\052\100\055\114\056\112\057" +
    "\061\064\075\066\103\067\074\072\101\074\102\105\065" +
    "\106\056\001\002\000\056\012\uffd5\020\uffd5\022\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\051\uffd5\054\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\065\uffd5\067\uffd5\070\uffd5\071" +
    "\uffd5\073\uffd5\075\uffd5\100\uffd5\101\uffd5\102\uffd5\001\002" +
    "\000\026\005\227\006\231\015\222\024\224\035\220\036" +
    "\230\040\225\041\221\051\223\052\217\001\002\000\104" +
    "\004\115\005\062\006\064\007\104\010\106\014\111\015" +
    "\055\016\066\017\060\021\077\024\105\033\072\034\113" +
    "\035\057\036\110\040\063\041\073\042\071\043\054\044" +
    "\067\045\076\051\070\052\100\055\114\056\112\057\061" +
    "\064\075\066\103\067\074\072\101\074\102\105\065\106" +
    "\056\001\002\000\056\012\uffdd\020\uffdd\022\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\051\uffdd\054\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\065\uffdd\067\uffdd\070\uffdd\071\uffdd" +
    "\073\uffdd\075\uffdd\100\uffdd\101\uffdd\102\uffdd\001\002\000" +
    "\056\012\uffd7\020\uffd7\022\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\051\uffd7\054\uffd7\060\uffd7\061\uffd7\062\uffd7\063" +
    "\uffd7\065\uffd7\067\uffd7\070\uffd7\071\uffd7\073\uffd7\075\uffd7" +
    "\100\uffd7\101\uffd7\102\uffd7\001\002\000\056\012\uffde\020" +
    "\uffde\022\uffde\026\uffde\027\uffde\030\uffde\031\uffde\051\uffde" +
    "\054\uffde\060\uffde\061\uffde\062\uffde\063\uffde\065\uffde\067" +
    "\uffde\070\uffde\071\uffde\073\uffde\075\uffde\100\uffde\101\uffde" +
    "\102\uffde\001\002\000\056\012\uffda\020\uffda\022\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\051\uffda\054\uffda\060\uffda" +
    "\061\uffda\062\uffda\063\uffda\065\uffda\067\uffda\070\uffda\071" +
    "\uffda\073\uffda\075\uffda\100\uffda\101\uffda\102\uffda\001\002" +
    "\000\056\012\uffd9\020\uffd9\022\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\051\uffd9\054\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\065\uffd9\067\uffd9\070\uffd9\071\uffd9\073\uffd9\075" +
    "\uffd9\100\uffd9\101\uffd9\102\uffd9\001\002\000\056\012\uffe0" +
    "\020\uffe0\022\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\051" +
    "\uffe0\054\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\065\uffe0" +
    "\067\uffe0\070\uffe0\071\uffe0\073\uffe0\075\uffe0\100\uffe0\101" +
    "\uffe0\102\uffe0\001\002\000\056\012\uffd8\020\uffd8\022\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\051\uffd8\054\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\065\uffd8\067\uffd8\070\uffd8" +
    "\071\uffd8\073\uffd8\075\uffd8\100\uffd8\101\uffd8\102\uffd8\001" +
    "\002\000\056\012\uffdf\020\uffdf\022\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\051\uffdf\054\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\065\uffdf\067\uffdf\070\uffdf\071\uffdf\073\uffdf" +
    "\075\uffdf\100\uffdf\101\uffdf\102\uffdf\001\002\000\056\012" +
    "\uffdb\020\uffdb\022\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\051\uffdb\054\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\065" +
    "\uffdb\067\uffdb\070\uffdb\071\uffdb\073\uffdb\075\uffdb\100\uffdb" +
    "\101\uffdb\102\uffdb\001\002\000\056\012\uffdc\020\uffdc\022" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\051\uffdc\054\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\063\uffdc\065\uffdc\067\uffdc\070" +
    "\uffdc\071\uffdc\073\uffdc\075\uffdc\100\uffdc\101\uffdc\102\uffdc" +
    "\001\002\000\004\054\uffed\001\002\000\056\012\uffcb\020" +
    "\uffcb\022\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\051\uffcb" +
    "\054\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\065\uffcb\067" +
    "\uffcb\070\uffcb\071\uffcb\073\uffcb\075\uffcb\100\uffcb\101\uffcb" +
    "\102\uffcb\001\002\000\004\054\uffef\001\002\000\004\054" +
    "\uffeb\001\002\000\004\054\ufffb\001\002\000\004\011\251" +
    "\001\002\000\104\004\115\005\062\006\064\007\104\010" +
    "\106\014\111\015\055\016\066\017\060\021\077\024\105" +
    "\033\072\034\113\035\057\036\110\040\063\041\073\042" +
    "\071\043\054\044\067\045\076\051\070\052\100\055\114" +
    "\056\112\057\061\064\075\066\103\067\074\072\101\074" +
    "\102\105\065\106\056\001\002\000\004\032\253\001\002" +
    "\000\104\004\115\005\062\006\064\007\104\010\106\014" +
    "\111\015\055\016\066\017\060\021\077\024\105\033\072" +
    "\034\113\035\057\036\110\040\063\041\073\042\071\043" +
    "\054\044\067\045\076\051\070\052\100\055\114\056\112" +
    "\057\061\064\075\066\103\067\074\072\101\074\102\105" +
    "\065\106\056\001\002\000\056\012\uffcc\020\uffcc\022\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\051\uffcc\054\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\065\uffcc\067\uffcc\070\uffcc" +
    "\071\uffcc\073\uffcc\075\uffcc\100\uffcc\101\uffcc\102\uffcc\001" +
    "\002\000\056\012\uffd0\020\uffd0\022\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\051\uffd0\054\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0" +
    "\075\uffd0\100\uffd0\101\uffd0\102\uffd0\001\002\000\004\054" +
    "\ufff3\001\002\000\004\002\000\001\002\000\056\012\uffe3" +
    "\020\uffe3\022\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\051" +
    "\uffe3\054\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\065\uffe3" +
    "\067\uffe3\070\uffe3\071\uffe3\073\uffe3\075\uffe3\100\uffe3\101" +
    "\uffe3\102\uffe3\001\002\000\060\012\uffd2\020\uffd2\022\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\051\uffd2\054\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\065\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\073\uffd2\075\uffd2\100\uffd2\101\uffd2\102\uffd2\103" +
    "\262\001\002\000\026\005\227\006\231\015\222\024\224" +
    "\035\220\036\230\040\225\041\221\051\223\052\217\001" +
    "\002\000\056\012\uffd3\020\uffd3\022\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\051\uffd3\054\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\065\uffd3\067\uffd3\070\uffd3\071\uffd3\073\uffd3" +
    "\075\uffd3\100\uffd3\101\uffd3\102\uffd3\001\002\000\056\012" +
    "\uffc8\020\uffc8\022\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\051\uffc8\054\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\073\uffc8\075\uffc8\100\uffc8" +
    "\101\uffc8\102\uffc8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\004\002\003\001\001\000\002\001\001\000" +
    "\040\003\011\005\027\007\040\010\020\011\030\015\031" +
    "\016\050\017\012\020\045\021\022\022\021\023\043\027" +
    "\026\030\024\031\042\001\001\000\004\025\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\257\001" +
    "\001\000\002\001\001\000\040\003\255\005\027\007\040" +
    "\010\020\011\030\015\031\016\050\017\012\020\045\021" +
    "\022\022\021\023\043\027\026\030\024\031\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\254\001\001\000\004\025\247\001\001\000\040" +
    "\003\246\005\027\007\040\010\020\011\030\015\031\016" +
    "\050\017\012\020\045\021\022\022\021\023\043\027\026" +
    "\030\024\031\042\001\001\000\040\003\245\005\027\007" +
    "\040\010\020\011\030\015\031\016\050\017\012\020\045" +
    "\021\022\022\021\023\043\027\026\030\024\031\042\001" +
    "\001\000\040\003\244\005\027\007\040\010\020\011\030" +
    "\015\031\016\050\017\012\020\045\021\022\022\021\023" +
    "\043\027\026\030\024\031\042\001\001\000\004\025\243" +
    "\001\001\000\040\003\242\005\027\007\040\010\020\011" +
    "\030\015\031\016\050\017\012\020\045\021\022\022\021" +
    "\023\043\027\026\030\024\031\042\001\001\000\002\001" +
    "\001\000\040\003\212\005\027\007\040\010\020\011\030" +
    "\015\031\016\050\017\012\020\045\021\022\022\021\023" +
    "\043\027\026\030\024\031\042\001\001\000\040\003\211" +
    "\005\027\007\040\010\020\011\030\015\031\016\050\017" +
    "\012\020\045\021\022\022\021\023\043\027\026\030\024" +
    "\031\042\001\001\000\040\003\210\005\027\007\040\010" +
    "\020\011\030\015\031\016\050\017\012\020\045\021\022" +
    "\022\021\023\043\027\026\030\024\031\042\001\001\000" +
    "\040\003\207\005\027\007\040\010\020\011\030\015\031" +
    "\016\050\017\012\020\045\021\022\022\021\023\043\027" +
    "\026\030\024\031\042\001\001\000\002\001\001\000\004" +
    "\025\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\156\001\001\000\002\001\001\000\040\003\155" +
    "\005\027\007\040\010\020\011\030\015\031\016\050\017" +
    "\012\020\045\021\022\022\021\023\043\027\026\030\024" +
    "\031\042\001\001\000\004\025\154\001\001\000\040\003" +
    "\153\005\027\007\040\010\020\011\030\015\031\016\050" +
    "\017\012\020\045\021\022\022\021\023\043\027\026\030" +
    "\024\031\042\001\001\000\040\003\152\005\027\007\040" +
    "\010\020\011\030\015\031\016\050\017\012\020\045\021" +
    "\022\022\021\023\043\027\026\030\024\031\042\001\001" +
    "\000\004\025\151\001\001\000\040\003\150\005\027\007" +
    "\040\010\020\011\030\015\031\016\050\017\012\020\045" +
    "\021\022\022\021\023\043\027\026\030\024\031\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\051" +
    "\005\027\007\040\010\020\011\030\015\031\016\050\017" +
    "\012\020\045\021\022\022\021\023\043\027\026\030\024" +
    "\031\042\001\001\000\002\001\001\000\004\025\106\001" +
    "\001\000\004\025\147\001\001\000\004\025\146\001\001" +
    "\000\002\001\001\000\004\025\145\001\001\000\004\025" +
    "\144\001\001\000\004\025\143\001\001\000\004\025\142" +
    "\001\001\000\004\025\141\001\001\000\004\025\140\001" +
    "\001\000\002\001\001\000\004\025\137\001\001\000\004" +
    "\025\136\001\001\000\004\025\135\001\001\000\004\025" +
    "\134\001\001\000\004\025\133\001\001\000\004\025\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\131\001\001\000\004\025\130\001\001\000\004\025\127" +
    "\001\001\000\002\001\001\000\004\025\126\001\001\000" +
    "\004\025\125\001\001\000\004\025\124\001\001\000\004" +
    "\025\123\001\001\000\004\025\122\001\001\000\002\001" +
    "\001\000\004\025\121\001\001\000\004\025\120\001\001" +
    "\000\004\025\117\001\001\000\004\025\116\001\001\000" +
    "\004\025\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\205\001\001\000\004\006\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\204\001" +
    "\001\000\004\025\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\225\001" +
    "\001\000\004\025\241\001\001\000\004\025\240\001\001" +
    "\000\004\026\237\001\001\000\004\025\236\001\001\000" +
    "\004\026\235\001\001\000\004\025\234\001\001\000\004" +
    "\025\233\001\001\000\002\001\001\000\004\026\232\001" +
    "\001\000\004\025\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\251\001\001\000" +
    "\002\001\001\000\004\025\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
     
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
  public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

 public int contador=1;
public int contadorelif=1;
public int contadorsegun=0;
  public String tab="";
public String dowh="";
public boolean verswitch,ifbo,dow=false;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= INICIO SENTENCIA FIN 
            {
              Object RESULT =null;
		   System.out.println(Ventana.python);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION SENTENCIA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= ASIGNACION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IMPRESIONES SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IMPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= COMENTARIO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= CONDICIONAL_IF SENTENCIA 
            {
              Object RESULT =null;
		



System.out.println(Ventana.python);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= CONDICIONAL_IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= CONDICIONAL_MULTIPLE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= CONDICIONAL_MULTIPLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= CONDICIONAL_FOR SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= CONDICIONAL_FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= CONDICIONAL_WHILE SENTENCIA 
            {
              Object RESULT =null;
		System.out.println(Ventana.python);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= CONDICIONAL_WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= CONDICIONAL_DOWHILE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= CONDICIONAL_DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= RETURN SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= CONDICIONAL_METODO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= CONDICIONAL_METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= CONDICIONAL_FUNCION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= CONDICIONAL_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= LLAMADA SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= IMPRESION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPRESION ::= IMPRIMIR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.python=Ventana.python+tab+"print("+a+") \n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMPRESION ::= IMPRIMIR_NL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.python=Ventana.python+tab+"print("+a+") \n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LLAMADA ::= EJECUTAR iDENTIFICADOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.python=Ventana.python+tab+a+b+""+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODO_EXPRE ::= iDENTIFICADOR METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODO_EXPRE ::= COMA METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODO_EXPRE ::= PARIZQ METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO_EXPRE ::= PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODO_EXPRE ::= cADENA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODO_EXPRE ::= DECIMAL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODO_EXPRE ::= Op_booleano EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODO_EXPRE ::= ENTERO EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODO_EXPRE ::= MENOS EXPRESION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String a="-"+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODO_EXPRE ::= cHAR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICIONAL_FUNCION ::= Funcion iDENTIFICADOR T_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{


Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

contador=contador+1;
Ventana.python=Ventana.python+"def "+a+"()"+":"+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICIONAL_FUNCION ::= Funcion iDENTIFICADOR T_dato Con_parametros METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{


Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

contador=contador+1;
Ventana.python=Ventana.python+"def "+a+""+b+":"+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICIONAL_FUNCION ::= Fin_funcion 
            {
              Object RESULT =null;
		
contador=contador-1;
 if(contador==1){
tab="";
}else{ 

tab="";
       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICIONAL_METODO ::= Metodo iDENTIFICADOR Con_parametros METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{


Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

contador=contador+1;
Ventana.python=Ventana.python+"def "+a+""+b+":"+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICIONAL_METODO ::= Metodo iDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{


Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

contador=contador+1;
Ventana.python=Ventana.python+"def "+a+"()"+":"+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICIONAL_METODO ::= Fin_metodo 
            {
              Object RESULT =null;
		
contador=contador-1;
 if(contador==1){
tab="";
}else{ 

tab="";
       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETURN ::= Retornar EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.python=Ventana.python+tab+"return"+a+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICIONAL_DOWHILE ::= Repetir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            dow=true;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_DOWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICIONAL_WHILE ::= Mientras EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{
Ventana.python=Ventana.python+tab;
    tab="";
 for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}

}contador=contador+1;
Ventana.python=Ventana.python+"while ("+a+"):"+"\n";
System.out.println(Ventana.python);


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICIONAL_WHILE ::= Fin_mientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String hola=a;
contador=contador-1;
 if(contador==1){
tab="";
}else{ 

tab="";
       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

System.out.println(Ventana.python);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICIONAL_FOR ::= Para EXPRESION FLECHA EXPRESION Hasta EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.python=Ventana.python+"for "+a;
contador=contador+1;

for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}



              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONAL_MULTIPLE ::= Segun EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

System.out.println("entroooooo");



System.out.println(a);




System.out.println(Ventana.python);


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_MULTIPLE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICIONAL_MULTIPLE ::= Fin_segun 
            {
              Object RESULT =null;
		
if(contador==1){

}else{
contador=contador-1;
}
if(contadorsegun==-1){
verswitch=false;
}

    if(contador==1){
tab="";
}else{ 

tab="";
       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_MULTIPLE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONAL_MULTIPLE ::= interc EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
contadorsegun=contadorsegun+1;
if(contador==1){ 

     tab="";
Ventana.python=Ventana.python+tab;

for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

else {

Ventana.python=Ventana.python+tab;
tab="";

       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}
contador=contador+1;
if(verswitch==false){
verswitch=true;
Ventana.python=Ventana.python+"if "+a+":"+"\n";
}else{
Ventana.python=Ventana.python+"elif "+a+":"+"\n";
}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_MULTIPLE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONAL_IF ::= Condicional_si EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if (contador==1){
tab="";
Ventana.python=Ventana.python+tab;
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}


}else{
Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}

}



contador=contador+1;
Ventana.python=Ventana.python+"if "+a+":"+"\n";
System.out.println(Ventana.python);


 


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONAL_IF ::= O_si EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador==2){

tab="";

Ventana.python=Ventana.python+tab;
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}

}else{
Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}


contador=contador+1;
Ventana.python=Ventana.python+"elif "+a+":"+"\n";
System.out.println(Ventana.python);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICIONAL_IF ::= Fin_osi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
contador=contador-1;
tab="";
if(contador==2){
tab="   ";

}else{

for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   


}



}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICIONAL_IF ::= Fin_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador==1){
tab="";
ifbo=false;
}else{
if(ifbo==true){
contador=contador+1;
}
contador=contador-2;
tab="";
ifbo=true;
for (int i = 0; i <contador; i++) {
            tab=tab+"   ";   
}
}

   

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= INGRESAR iDENTIFICADOR COMA DECLARACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

Ventana.python=Ventana.python+tab+a+","+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= INGRESAR iDENTIFICADOR COMO T_dato CON_VALOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		




Ventana.python=Ventana.python+tab+a+"="+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION1 ::= iDENTIFICADOR COMA DECLARACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+","+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION1",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION1 ::= iDENTIFICADOR COMO T_dato CON_VALOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

a=a+"="+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION1",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACION ::= iDENTIFICADOR COMA ASIGNACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

Ventana.python=Ventana.python+tab+a+","+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION ::= iDENTIFICADOR FLECHA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.python=Ventana.python+tab+a+"="+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACION1 ::= iDENTIFICADOR COMA ASIGNACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+","+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION1 ::= iDENTIFICADOR FLECHA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

a=a+"="+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= cM_MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= cM_LINE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= ENTERO EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= Op_booleano EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= MENOS EXPRESION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String a="-"+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= DECIMAL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= Modulo EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= Mayorigual EXPRESION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa=">="+b;
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= menorigual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="<="+b;
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= esiGual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="=="+b;
System.out.println(aa);
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= intera EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="";
System.out.println(aa);
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= esdifeErente EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="!="+b;
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= Potencia EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= CORIZQ EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= CORDER EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= cADENA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= cHAR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= iDENTIFICADOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= MAS EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= POR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= DIVIDIDO EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= PARIZQ EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= PARDER EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= COMA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= menor EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= mayor EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= admiracionb EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= admiraciona EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= PTCOMA 
            {
              Object RESULT =null;
		
String b="";
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= Entonces 
            {
              Object RESULT =null;
		
String b="";
System.out.println("llego");
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= Hacer 
            {
              Object RESULT =null;
		
String b="";
System.out.println("llegox2");
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= Fin_si 
            {
              Object RESULT =null;
		
String b="";
System.out.println("llego");
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= andd EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=" "+"and "+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
