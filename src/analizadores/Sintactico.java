
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import analizadores.Ventana;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\004\000\002\007\004" +
    "\000\002\031\005\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\003\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\023\005\000\002\023\007\000" +
    "\002\023\003\000\002\022\006\000\002\022\004\000\002" +
    "\022\003\000\002\030\004\000\002\021\003\000\002\021" +
    "\004\000\002\020\004\000\002\020\003\000\002\017\007" +
    "\000\002\017\003\000\002\016\004\000\002\016\004\000" +
    "\002\016\003\000\002\016\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\011\006\000\002\011\010\000\002\012\005" +
    "\000\002\012\007\000\002\005\005\000\002\005\005\000" +
    "\002\006\005\000\002\006\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\004\000\002\025\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\053\005\001\002\000\004\002\300\001" +
    "\002\000\062\012\011\020\041\022\042\026\012\027\037" +
    "\030\053\031\043\051\040\060\006\061\022\062\045\063" +
    "\026\065\010\067\052\070\017\071\031\073\021\075\050" +
    "\076\007\077\030\100\036\101\020\102\016\104\015\001" +
    "\002\000\106\004\121\005\066\006\067\007\107\010\111" +
    "\014\113\015\060\016\072\017\063\021\102\024\110\032" +
    "\112\033\075\034\117\035\062\036\115\040\065\041\076" +
    "\042\074\043\057\044\071\045\101\051\073\052\103\055" +
    "\120\056\116\057\064\064\100\066\106\067\077\072\104" +
    "\074\105\105\070\106\061\001\002\000\064\012\uffc7\020" +
    "\uffc7\022\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\051\uffc7" +
    "\054\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\065\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\073\uffc7\075\uffc7\076\uffc7\077\uffc7" +
    "\100\uffc7\101\uffc7\102\uffc7\104\uffc7\001\002\000\004\051" +
    "\274\001\002\000\064\012\uffc4\020\uffc4\022\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\051\uffc4\054\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\065\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\073\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102" +
    "\uffc4\104\uffc4\001\002\000\106\004\121\005\066\006\067" +
    "\007\107\010\111\014\113\015\060\016\072\017\063\021" +
    "\102\024\110\032\112\033\075\034\117\035\062\036\115" +
    "\040\065\041\076\042\074\043\057\044\071\045\101\051" +
    "\073\052\103\055\120\056\116\057\064\064\100\066\106" +
    "\067\077\072\104\074\105\105\070\106\061\001\002\000" +
    "\004\054\272\001\002\000\064\012\011\020\041\022\042" +
    "\026\012\027\037\030\053\031\043\051\040\054\ufffc\060" +
    "\006\061\022\062\045\063\026\065\010\067\052\070\017" +
    "\071\031\073\021\075\050\076\007\077\030\100\036\101" +
    "\020\102\016\104\015\001\002\000\066\012\uffbe\020\uffbe" +
    "\022\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\051\uffbe\054" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\065\uffbe\067\uffbe" +
    "\070\uffbe\071\uffbe\072\270\073\uffbe\075\uffbe\076\uffbe\077" +
    "\uffbe\100\uffbe\101\uffbe\102\uffbe\104\uffbe\001\002\000\064" +
    "\012\uffc9\020\uffc9\022\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\051\uffc9\054\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\065\uffc9\067\uffc9\070\uffc9\071\uffc9\073\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\104\uffc9\001\002" +
    "\000\064\012\uffcc\020\uffcc\022\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\051\uffcc\054\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\063\uffcc\065\uffcc\067\uffcc\070\uffcc\071\uffcc\073\uffcc\075" +
    "\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\104\uffcc" +
    "\001\002\000\064\012\uffd1\020\uffd1\022\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\051\uffd1\054\uffd1\060\uffd1\061\uffd1" +
    "\062\uffd1\063\uffd1\065\uffd1\067\uffd1\070\uffd1\071\uffd1\073" +
    "\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1" +
    "\104\uffd1\001\002\000\106\004\121\005\066\006\067\007" +
    "\107\010\111\014\113\015\060\016\072\017\063\021\102" +
    "\024\110\032\112\033\075\034\117\035\062\036\115\040" +
    "\065\041\076\042\074\043\057\044\071\045\101\051\073" +
    "\052\103\055\120\056\116\057\064\064\100\066\106\067" +
    "\077\072\104\074\105\105\070\106\061\001\002\000\004" +
    "\051\263\001\002\000\064\012\011\020\041\022\042\026" +
    "\012\027\037\030\053\031\043\051\040\054\ufff8\060\006" +
    "\061\022\062\045\063\026\065\010\067\052\070\017\071" +
    "\031\073\021\075\050\076\007\077\030\100\036\101\020" +
    "\102\016\104\015\001\002\000\064\012\011\020\041\022" +
    "\042\026\012\027\037\030\053\031\043\051\040\054\uffea" +
    "\060\006\061\022\062\045\063\026\065\010\067\052\070" +
    "\017\071\031\073\021\075\050\076\007\077\030\100\036" +
    "\101\020\102\016\104\015\001\002\000\064\012\011\020" +
    "\041\022\042\026\012\027\037\030\053\031\043\051\040" +
    "\054\uffee\060\006\061\022\062\045\063\026\065\010\067" +
    "\052\070\017\071\031\073\021\075\050\076\007\077\030" +
    "\100\036\101\020\102\016\104\015\001\002\000\106\004" +
    "\121\005\066\006\067\007\107\010\111\014\113\015\060" +
    "\016\072\017\063\021\102\024\110\032\112\033\075\034" +
    "\117\035\062\036\115\040\065\041\076\042\074\043\057" +
    "\044\071\045\101\051\073\052\103\055\120\056\116\057" +
    "\064\064\100\066\106\067\077\072\104\074\105\105\070" +
    "\106\061\001\002\000\064\012\011\020\041\022\042\026" +
    "\012\027\037\030\053\031\043\051\040\054\uffec\060\006" +
    "\061\022\062\045\063\026\065\010\067\052\070\017\071" +
    "\031\073\021\075\050\076\007\077\030\100\036\101\020" +
    "\102\016\104\015\001\002\000\034\005\235\006\237\015" +
    "\226\024\230\033\234\034\240\035\224\036\236\040\231" +
    "\041\225\047\232\051\227\052\223\001\002\000\004\051" +
    "\220\001\002\000\064\012\011\020\041\022\042\026\012" +
    "\027\037\030\053\031\043\051\040\054\ufff6\060\006\061" +
    "\022\062\045\063\026\065\010\067\052\070\017\071\031" +
    "\073\021\075\050\076\007\077\030\100\036\101\020\102" +
    "\016\104\015\001\002\000\064\012\011\020\041\022\042" +
    "\026\012\027\037\030\053\031\043\051\040\054\ufffa\060" +
    "\006\061\022\062\045\063\026\065\010\067\052\070\017" +
    "\071\031\073\021\075\050\076\007\077\030\100\036\101" +
    "\020\102\016\104\015\001\002\000\064\012\011\020\041" +
    "\022\042\026\012\027\037\030\053\031\043\051\040\054" +
    "\ufffe\060\006\061\022\062\045\063\026\065\010\067\052" +
    "\070\017\071\031\073\021\075\050\076\007\077\030\100" +
    "\036\101\020\102\016\104\015\001\002\000\064\012\011" +
    "\020\041\022\042\026\012\027\037\030\053\031\043\051" +
    "\040\054\ufff4\060\006\061\022\062\045\063\026\065\010" +
    "\067\052\070\017\071\031\073\021\075\050\076\007\077" +
    "\030\100\036\101\020\102\016\104\015\001\002\000\064" +
    "\012\uffce\020\uffce\022\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\051\uffce\054\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\065\uffce\067\uffce\070\uffce\071\uffce\073\uffce\075\uffce\076" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\104\uffce\001\002" +
    "\000\106\004\121\005\066\006\067\007\107\010\111\014" +
    "\113\015\060\016\072\017\063\021\102\024\110\032\112" +
    "\033\075\034\117\035\062\036\115\040\065\041\076\042" +
    "\074\043\057\044\071\045\101\051\073\052\103\055\120" +
    "\056\116\057\064\064\100\066\106\067\077\072\104\074" +
    "\105\105\070\106\061\001\002\000\006\011\203\041\202" +
    "\001\002\000\004\051\164\001\002\000\106\004\121\005" +
    "\066\006\067\007\107\010\111\014\113\015\060\016\072" +
    "\017\063\021\102\024\110\032\112\033\075\034\117\035" +
    "\062\036\115\040\065\041\076\042\074\043\057\044\071" +
    "\045\101\051\073\052\103\055\120\056\116\057\064\064" +
    "\100\066\106\067\077\072\104\074\105\105\070\106\061" +
    "\001\002\000\064\012\uffc0\020\uffc0\022\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\051\uffc0\054\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\065\uffc0\067\uffc0\070\uffc0\071\uffc0\073" +
    "\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0" +
    "\104\uffc0\001\002\000\064\012\011\020\041\022\042\026" +
    "\012\027\037\030\053\031\043\051\040\054\uffe4\060\006" +
    "\061\022\062\045\063\026\065\010\067\052\070\017\071" +
    "\031\073\021\075\050\076\007\077\030\100\036\101\020" +
    "\102\016\104\015\001\002\000\106\004\121\005\066\006" +
    "\067\007\107\010\111\014\113\015\060\016\072\017\063" +
    "\021\102\024\110\032\112\033\075\034\117\035\062\036" +
    "\115\040\065\041\076\042\074\043\057\044\071\045\101" +
    "\051\073\052\103\055\120\056\116\057\064\064\100\066" +
    "\106\067\077\072\104\074\105\105\070\106\061\001\002" +
    "\000\064\012\011\020\041\022\042\026\012\027\037\030" +
    "\053\031\043\051\040\054\uffe6\060\006\061\022\062\045" +
    "\063\026\065\010\067\052\070\017\071\031\073\021\075" +
    "\050\076\007\077\030\100\036\101\020\102\016\104\015" +
    "\001\002\000\064\012\011\020\041\022\042\026\012\027" +
    "\037\030\053\031\043\051\040\054\uffe8\060\006\061\022" +
    "\062\045\063\026\065\010\067\052\070\017\071\031\073" +
    "\021\075\050\076\007\077\030\100\036\101\020\102\016" +
    "\104\015\001\002\000\106\004\121\005\066\006\067\007" +
    "\107\010\111\014\113\015\060\016\072\017\063\021\102" +
    "\024\110\032\112\033\075\034\117\035\062\036\115\040" +
    "\065\041\076\042\074\043\057\044\071\045\101\051\073" +
    "\052\103\055\120\056\116\057\064\064\100\066\106\067" +
    "\077\072\104\074\105\105\070\106\061\001\002\000\064" +
    "\012\011\020\041\022\042\026\012\027\037\030\053\031" +
    "\043\051\040\054\ufff0\060\006\061\022\062\045\063\026" +
    "\065\010\067\052\070\017\071\031\073\021\075\050\076" +
    "\007\077\030\100\036\101\020\102\016\104\015\001\002" +
    "\000\064\012\uffbf\020\uffbf\022\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\051\uffbf\054\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\065\uffbf\067\uffbf\070\uffbf\071\uffbf\073\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\104\uffbf" +
    "\001\002\000\004\051\056\001\002\000\064\012\011\020" +
    "\041\022\042\026\012\027\037\030\053\031\043\051\040" +
    "\054\ufff2\060\006\061\022\062\045\063\026\065\010\067" +
    "\052\070\017\071\031\073\021\075\050\076\007\077\030" +
    "\100\036\101\020\102\016\104\015\001\002\000\004\054" +
    "\ufff3\001\002\000\106\004\121\005\066\006\067\007\107" +
    "\010\111\014\113\015\060\016\072\017\063\021\102\024" +
    "\110\032\112\033\075\034\117\035\062\036\115\040\065" +
    "\041\076\042\074\043\057\044\071\045\101\051\073\052" +
    "\103\055\120\056\116\057\064\064\100\066\106\067\077" +
    "\072\104\074\105\105\070\106\061\001\002\000\106\004" +
    "\121\005\066\006\067\007\107\010\111\014\113\015\060" +
    "\016\072\017\063\021\102\024\110\032\112\033\075\034" +
    "\117\035\062\036\115\040\065\041\076\042\074\043\057" +
    "\044\071\045\101\051\073\052\103\055\120\056\116\057" +
    "\064\064\100\066\106\067\077\072\104\074\105\105\070" +
    "\106\061\001\002\000\106\004\121\005\066\006\067\007" +
    "\107\010\111\014\113\015\060\016\072\017\063\021\102" +
    "\024\110\032\112\033\075\034\117\035\062\036\115\040" +
    "\065\041\076\042\074\043\057\044\071\045\101\051\073" +
    "\052\103\055\120\056\116\057\064\064\100\066\106\067" +
    "\077\072\104\074\105\105\070\106\061\001\002\000\164" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\051\uffb5\052\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5" +
    "\101\uffb5\102\uffb5\104\uffb5\105\uffb5\106\uffb5\001\002\000" +
    "\106\004\121\005\066\006\067\007\107\010\111\014\113" +
    "\015\060\016\072\017\063\021\102\024\110\032\112\033" +
    "\075\034\117\035\062\036\115\040\065\041\076\042\074" +
    "\043\057\044\071\045\101\051\073\052\103\055\120\056" +
    "\116\057\064\064\100\066\106\067\077\072\104\074\105" +
    "\105\070\106\061\001\002\000\106\004\121\005\066\006" +
    "\067\007\107\010\111\014\113\015\060\016\072\017\063" +
    "\021\102\024\110\032\112\033\075\034\117\035\062\036" +
    "\115\040\065\041\076\042\074\043\057\044\071\045\101" +
    "\051\073\052\103\055\120\056\116\057\064\064\100\066" +
    "\106\067\077\072\104\074\105\105\070\106\061\001\002" +
    "\000\106\004\121\005\066\006\067\007\107\010\111\014" +
    "\113\015\060\016\072\017\063\021\102\024\110\032\112" +
    "\033\075\034\117\035\062\036\115\040\065\041\076\042" +
    "\074\043\057\044\071\045\101\051\073\052\103\055\120" +
    "\056\116\057\064\064\100\066\106\067\077\072\104\074" +
    "\105\105\070\106\061\001\002\000\106\004\121\005\066" +
    "\006\067\007\107\010\111\014\113\015\060\016\072\017" +
    "\063\021\102\024\110\032\112\033\075\034\117\035\062" +
    "\036\115\040\065\041\076\042\074\043\057\044\071\045" +
    "\101\051\073\052\103\055\120\056\116\057\064\064\100" +
    "\066\106\067\077\072\104\074\105\105\070\106\061\001" +
    "\002\000\106\004\121\005\066\006\067\007\107\010\111" +
    "\014\113\015\060\016\072\017\063\021\102\024\110\032" +
    "\112\033\075\034\117\035\062\036\115\040\065\041\076" +
    "\042\074\043\057\044\071\045\101\051\073\052\103\055" +
    "\120\056\116\057\064\064\100\066\106\067\077\072\104" +
    "\074\105\105\070\106\061\001\002\000\106\004\121\005" +
    "\066\006\067\007\107\010\111\014\113\015\060\016\072" +
    "\017\063\021\102\024\110\032\112\033\075\034\117\035" +
    "\062\036\115\040\065\041\076\042\074\043\057\044\071" +
    "\045\101\051\073\052\103\055\120\056\116\057\064\064" +
    "\100\066\106\067\077\072\104\074\105\105\070\106\061" +
    "\001\002\000\164\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\012\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\024\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\051\uffb4\052" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\102\uffb4\104\uffb4\105\uffb4\106" +
    "\uffb4\001\002\000\106\004\121\005\066\006\067\007\107" +
    "\010\111\014\113\015\060\016\072\017\063\021\102\024" +
    "\110\032\112\033\075\034\117\035\062\036\115\040\065" +
    "\041\076\042\074\043\057\044\071\045\101\051\073\052" +
    "\103\055\120\056\116\057\064\064\100\066\106\067\077" +
    "\072\104\074\105\105\070\106\061\001\002\000\106\004" +
    "\121\005\066\006\067\007\107\010\111\014\113\015\060" +
    "\016\072\017\063\021\102\024\110\032\112\033\075\034" +
    "\117\035\062\036\115\040\065\041\076\042\074\043\057" +
    "\044\071\045\101\051\073\052\103\055\120\056\116\057" +
    "\064\064\100\066\106\067\077\072\104\074\105\105\070" +
    "\106\061\001\002\000\106\004\121\005\066\006\067\007" +
    "\107\010\111\014\113\015\060\016\072\017\063\021\102" +
    "\024\110\032\112\033\075\034\117\035\062\036\115\040" +
    "\065\041\076\042\074\043\057\044\071\045\101\051\073" +
    "\052\103\055\120\056\116\057\064\064\100\066\106\067" +
    "\077\072\104\074\105\105\070\106\061\001\002\000\106" +
    "\004\121\005\066\006\067\007\107\010\111\014\113\015" +
    "\060\016\072\017\063\021\102\024\110\032\112\033\075" +
    "\034\117\035\062\036\115\040\065\041\076\042\074\043" +
    "\057\044\071\045\101\051\073\052\103\055\120\056\116" +
    "\057\064\064\100\066\106\067\077\072\104\074\105\105" +
    "\070\106\061\001\002\000\106\004\121\005\066\006\067" +
    "\007\107\010\111\014\113\015\060\016\072\017\063\021" +
    "\102\024\110\032\112\033\075\034\117\035\062\036\115" +
    "\040\065\041\076\042\074\043\057\044\071\045\101\051" +
    "\073\052\103\055\120\056\116\057\064\064\100\066\106" +
    "\067\077\072\104\074\105\105\070\106\061\001\002\000" +
    "\106\004\121\005\066\006\067\007\107\010\111\014\113" +
    "\015\060\016\072\017\063\021\102\024\110\032\112\033" +
    "\075\034\117\035\062\036\115\040\065\041\076\042\074" +
    "\043\057\044\071\045\101\051\073\052\103\055\120\056" +
    "\116\057\064\064\100\066\106\067\077\072\104\074\105" +
    "\105\070\106\061\001\002\000\164\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\012\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\024\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96" +
    "\036\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\051\uff96\052\uff96\054\uff96\055\uff96\056\uff96\057\uff96" +
    "\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066" +
    "\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96" +
    "\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96\102\uff96\104" +
    "\uff96\105\uff96\106\uff96\001\002\000\164\004\uff97\005\uff97" +
    "\006\uff97\007\uff97\010\uff97\012\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\024\uff97\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035" +
    "\uff97\036\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97" +
    "\045\uff97\051\uff97\052\uff97\054\uff97\055\uff97\056\uff97\057" +
    "\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97" +
    "\066\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074" +
    "\uff97\075\uff97\076\uff97\077\uff97\100\uff97\101\uff97\102\uff97" +
    "\104\uff97\105\uff97\106\uff97\001\002\000\106\004\121\005" +
    "\066\006\067\007\107\010\111\014\113\015\060\016\072" +
    "\017\063\021\102\024\110\032\112\033\075\034\117\035" +
    "\062\036\115\040\065\041\076\042\074\043\057\044\071" +
    "\045\101\051\073\052\103\055\120\056\116\057\064\064" +
    "\100\066\106\067\077\072\104\074\105\105\070\106\061" +
    "\001\002\000\106\004\121\005\066\006\067\007\107\010" +
    "\111\014\113\015\060\016\072\017\063\021\102\024\110" +
    "\032\112\033\075\034\117\035\062\036\115\040\065\041" +
    "\076\042\074\043\057\044\071\045\101\051\073\052\103" +
    "\055\120\056\116\057\064\064\100\066\106\067\077\072" +
    "\104\074\105\105\070\106\061\001\002\000\106\004\121" +
    "\005\066\006\067\007\107\010\111\014\113\015\060\016" +
    "\072\017\063\021\102\024\110\032\112\033\075\034\117" +
    "\035\062\036\115\040\065\041\076\042\074\043\057\044" +
    "\071\045\101\051\073\052\103\055\120\056\116\057\064" +
    "\064\100\066\106\067\077\072\104\074\105\105\070\106" +
    "\061\001\002\000\164\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\010\uff98\012\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\024\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\051\uff98" +
    "\052\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061" +
    "\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98" +
    "\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076" +
    "\uff98\077\uff98\100\uff98\101\uff98\102\uff98\104\uff98\105\uff98" +
    "\106\uff98\001\002\000\106\004\121\005\066\006\067\007" +
    "\107\010\111\014\113\015\060\016\072\017\063\021\102" +
    "\024\110\032\112\033\075\034\117\035\062\036\115\040" +
    "\065\041\076\042\074\043\057\044\071\045\101\051\073" +
    "\052\103\055\120\056\116\057\064\064\100\066\106\067" +
    "\077\072\104\074\105\105\070\106\061\001\002\000\106" +
    "\004\121\005\066\006\067\007\107\010\111\014\113\015" +
    "\060\016\072\017\063\021\102\024\110\032\112\033\075" +
    "\034\117\035\062\036\115\040\065\041\076\042\074\043" +
    "\057\044\071\045\101\051\073\052\103\055\120\056\116" +
    "\057\064\064\100\066\106\067\077\072\104\074\105\105" +
    "\070\106\061\001\002\000\106\004\121\005\066\006\067" +
    "\007\107\010\111\014\113\015\060\016\072\017\063\021" +
    "\102\024\110\032\112\033\075\034\117\035\062\036\115" +
    "\040\065\041\076\042\074\043\057\044\071\045\101\051" +
    "\073\052\103\055\120\056\116\057\064\064\100\066\106" +
    "\067\077\072\104\074\105\105\070\106\061\001\002\000" +
    "\106\004\121\005\066\006\067\007\107\010\111\014\113" +
    "\015\060\016\072\017\063\021\102\024\110\032\112\033" +
    "\075\034\117\035\062\036\115\040\065\041\076\042\074" +
    "\043\057\044\071\045\101\051\073\052\103\055\120\056" +
    "\116\057\064\064\100\066\106\067\077\072\104\074\105" +
    "\105\070\106\061\001\002\000\106\004\121\005\066\006" +
    "\067\007\107\010\111\014\113\015\060\016\072\017\063" +
    "\021\102\024\110\032\112\033\075\034\117\035\062\036" +
    "\115\040\065\041\076\042\074\043\057\044\071\045\101" +
    "\051\073\052\103\055\120\056\116\057\064\064\100\066" +
    "\106\067\077\072\104\074\105\105\070\106\061\001\002" +
    "\000\164\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\012" +
    "\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\024\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032" +
    "\uff94\033\uff94\034\uff94\035\uff94\036\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\045\uff94\051\uff94\052\uff94\054" +
    "\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94" +
    "\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071" +
    "\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94" +
    "\100\uff94\101\uff94\102\uff94\104\uff94\105\uff94\106\uff94\001" +
    "\002\000\106\004\121\005\066\006\067\007\107\010\111" +
    "\014\113\015\060\016\072\017\063\021\102\024\110\032" +
    "\112\033\075\034\117\035\062\036\115\040\065\041\076" +
    "\042\074\043\057\044\071\045\101\051\073\052\103\055" +
    "\120\056\116\057\064\064\100\066\106\067\077\072\104" +
    "\074\105\105\070\106\061\001\002\000\064\012\uffe1\020" +
    "\uffe1\022\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\051\uffe1" +
    "\054\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\065\uffe1\067" +
    "\uffe1\070\uffe1\071\uffe1\073\uffe1\075\uffe1\076\uffe1\077\uffe1" +
    "\100\uffe1\101\uffe1\102\uffe1\104\uffe1\001\002\000\106\004" +
    "\121\005\066\006\067\007\107\010\111\014\113\015\060" +
    "\016\072\017\063\021\102\024\110\032\112\033\075\034" +
    "\117\035\062\036\115\040\065\041\076\042\074\043\057" +
    "\044\071\045\101\051\073\052\103\055\120\056\116\057" +
    "\064\064\100\066\106\067\077\072\104\074\105\105\070" +
    "\106\061\001\002\000\106\004\121\005\066\006\067\007" +
    "\107\010\111\014\113\015\060\016\072\017\063\021\102" +
    "\024\110\032\112\033\075\034\117\035\062\036\115\040" +
    "\065\041\076\042\074\043\057\044\071\045\101\051\073" +
    "\052\103\055\120\056\116\057\064\064\100\066\106\067" +
    "\077\072\104\074\105\105\070\106\061\001\002\000\106" +
    "\004\121\005\066\006\067\007\107\010\111\014\113\015" +
    "\060\016\072\017\063\021\102\024\110\032\112\033\075" +
    "\034\117\035\062\036\115\040\065\041\076\042\074\043" +
    "\057\044\071\045\101\051\073\052\103\055\120\056\116" +
    "\057\064\064\100\066\106\067\077\072\104\074\105\105" +
    "\070\106\061\001\002\000\106\004\121\005\066\006\067" +
    "\007\107\010\111\014\113\015\060\016\072\017\063\021" +
    "\102\024\110\032\112\033\075\034\117\035\062\036\115" +
    "\040\065\041\076\042\074\043\057\044\071\045\101\051" +
    "\073\052\103\055\120\056\116\057\064\064\100\066\106" +
    "\067\077\072\104\074\105\105\070\106\061\001\002\000" +
    "\164\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\012\uff99" +
    "\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022" +
    "\uff99\024\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\035\uff99\036\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\051\uff99\052\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063" +
    "\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99" +
    "\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100" +
    "\uff99\101\uff99\102\uff99\104\uff99\105\uff99\106\uff99\001\002" +
    "\000\164\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\012" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\024\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\051\uff9a\052\uff9a\054" +
    "\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071" +
    "\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a" +
    "\100\uff9a\101\uff9a\102\uff9a\104\uff9a\105\uff9a\106\uff9a\001" +
    "\002\000\164\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\012\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\051\uff9c\052\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c" +
    "\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077" +
    "\uff9c\100\uff9c\101\uff9c\102\uff9c\104\uff9c\105\uff9c\106\uff9c" +
    "\001\002\000\164\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010" +
    "\uff9b\012\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\024\uff9b\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\051\uff9b\052" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070" +
    "\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b" +
    "\077\uff9b\100\uff9b\101\uff9b\102\uff9b\104\uff9b\105\uff9b\106" +
    "\uff9b\001\002\000\164\004\uffa5\005\uffa5\006\uffa5\007\uffa5" +
    "\010\uffa5\012\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\051\uffa5" +
    "\052\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076" +
    "\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\104\uffa5\105\uffa5" +
    "\106\uffa5\001\002\000\164\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\012\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\024\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\051" +
    "\uffa3\052\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\104\uffa3\105" +
    "\uffa3\106\uffa3\001\002\000\164\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\012\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\024\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\051\uffa7\052\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075" +
    "\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\104\uffa7" +
    "\105\uffa7\106\uffa7\001\002\000\164\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\012\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\024\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\051\uffb3\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3" +
    "\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\104" +
    "\uffb3\105\uffb3\106\uffb3\001\002\000\164\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\012\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\024\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\051\uffa8\052\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8" +
    "\104\uffa8\105\uffa8\106\uffa8\001\002\000\164\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\012\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\024\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\051\uffaf\052\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf" +
    "\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102" +
    "\uffaf\104\uffaf\105\uffaf\106\uffaf\001\002\000\164\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\024\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\051\uffa9\052\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073" +
    "\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9" +
    "\102\uffa9\104\uffa9\105\uffa9\106\uffa9\001\002\000\164\004" +
    "\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\012\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\024" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\051\uffa6\052\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064" +
    "\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6" +
    "\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101" +
    "\uffa6\102\uffa6\104\uffa6\105\uffa6\106\uffa6\001\002\000\164" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\012\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\024\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\051\uffab\052\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab" +
    "\101\uffab\102\uffab\104\uffab\105\uffab\106\uffab\001\002\000" +
    "\164\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\051\uffaa\052\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa" +
    "\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100" +
    "\uffaa\101\uffaa\102\uffaa\104\uffaa\105\uffaa\106\uffaa\001\002" +
    "\000\164\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\012" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\051\uff9e\052\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071" +
    "\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e" +
    "\100\uff9e\101\uff9e\102\uff9e\104\uff9e\105\uff9e\106\uff9e\001" +
    "\002\000\164\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d" +
    "\012\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\024\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\051\uff9d\052\uff9d" +
    "\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\101\uff9d\102\uff9d\104\uff9d\105\uff9d\106\uff9d" +
    "\001\002\000\164\004\uffae\005\uffae\006\uffae\007\uffae\010" +
    "\uffae\012\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\024\uffae\026\uffae\027\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\051\uffae\052" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae" +
    "\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae" +
    "\077\uffae\100\uffae\101\uffae\102\uffae\104\uffae\105\uffae\106" +
    "\uffae\001\002\000\164\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\010\uffa4\012\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\022\uffa4\024\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\051\uffa4" +
    "\052\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\104\uffa4\105\uffa4" +
    "\106\uffa4\001\002\000\164\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\024\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\051" +
    "\uffa2\052\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\104\uffa2\105" +
    "\uffa2\106\uffa2\001\002\000\164\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\012\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\024\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\051\uffac\052\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075" +
    "\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac\104\uffac" +
    "\105\uffac\106\uffac\001\002\000\164\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\012\uff9f\014\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\022\uff9f\024\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\051\uff9f\052\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066" +
    "\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f" +
    "\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\104" +
    "\uff9f\105\uff9f\106\uff9f\001\002\000\164\004\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\012\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\024\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\051\uffa0\052\uffa0\054\uffa0\055\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074" +
    "\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0" +
    "\104\uffa0\105\uffa0\106\uffa0\001\002\000\164\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\012\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\051\uffb2\052\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\104\uffb2\105\uffb2\106\uffb2\001\002\000\164\004\uff95" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\012\uff95\014\uff95\015" +
    "\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\024\uff95" +
    "\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034" +
    "\uff95\035\uff95\036\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\051\uff95\052\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073" +
    "\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\101\uff95" +
    "\102\uff95\104\uff95\105\uff95\106\uff95\001\002\000\164\004" +
    "\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\012\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\024" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\051\uffa1\052\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1" +
    "\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\102\uffa1\104\uffa1\105\uffa1\106\uffa1\001\002\000\164" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\024\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\051\uffb0\052\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\104\uffb0\105\uffb0\106\uffb0\001\002\000" +
    "\164\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\012\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\051\uffb1\052\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\102\uffb1\104\uffb1\105\uffb1\106\uffb1\001\002" +
    "\000\164\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\012" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\024\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\051\uffad\052\uffad\054" +
    "\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071" +
    "\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad" +
    "\100\uffad\101\uffad\102\uffad\104\uffad\105\uffad\106\uffad\001" +
    "\002\000\004\054\ufff1\001\002\000\064\012\uffca\020\uffca" +
    "\022\uffca\026\uffca\027\uffca\030\uffca\031\uffca\051\uffca\054" +
    "\uffca\060\uffca\061\uffca\062\uffca\063\uffca\065\uffca\067\uffca" +
    "\070\uffca\071\uffca\073\uffca\075\uffca\076\uffca\077\uffca\100" +
    "\uffca\101\uffca\102\uffca\104\uffca\001\002\000\004\054\uffe9" +
    "\001\002\000\004\054\uffe7\001\002\000\064\012\uffc1\020" +
    "\uffc1\022\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\051\uffc1" +
    "\054\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\065\uffc1\067" +
    "\uffc1\070\uffc1\071\uffc1\073\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\104\uffc1\001\002\000\004\054" +
    "\uffe5\001\002\000\064\012\uffc3\020\uffc3\022\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\051\uffc3\054\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\065\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\073\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102" +
    "\uffc3\104\uffc3\001\002\000\006\025\166\041\165\001\002" +
    "\000\004\051\172\001\002\000\004\047\167\001\002\000" +
    "\004\037\170\001\002\000\106\004\121\005\066\006\067" +
    "\007\107\010\111\014\113\015\060\016\072\017\063\021" +
    "\102\024\110\032\112\033\075\034\117\035\062\036\115" +
    "\040\065\041\076\042\074\043\057\044\071\045\101\051" +
    "\073\052\103\055\120\056\116\057\064\064\100\066\106" +
    "\067\077\072\104\074\105\105\070\106\061\001\002\000" +
    "\064\012\uffbc\020\uffbc\022\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\051\uffbc\054\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\065\uffbc\067\uffbc\070\uffbc\071\uffbc\073\uffbc\075\uffbc" +
    "\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\104\uffbc\001" +
    "\002\000\006\025\175\041\174\001\002\000\064\012\uffbd" +
    "\020\uffbd\022\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\051" +
    "\uffbd\054\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\065\uffbd" +
    "\067\uffbd\070\uffbd\071\uffbd\073\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\104\uffbd\001\002\000\004" +
    "\051\172\001\002\000\004\047\176\001\002\000\004\037" +
    "\177\001\002\000\106\004\121\005\066\006\067\007\107" +
    "\010\111\014\113\015\060\016\072\017\063\021\102\024" +
    "\110\032\112\033\075\034\117\035\062\036\115\040\065" +
    "\041\076\042\074\043\057\044\071\045\101\051\073\052" +
    "\103\055\120\056\116\057\064\064\100\066\106\067\077" +
    "\072\104\074\105\105\070\106\061\001\002\000\064\012" +
    "\uffba\020\uffba\022\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\051\uffba\054\uffba\060\uffba\061\uffba\062\uffba\063\uffba\065" +
    "\uffba\067\uffba\070\uffba\071\uffba\073\uffba\075\uffba\076\uffba" +
    "\077\uffba\100\uffba\101\uffba\102\uffba\104\uffba\001\002\000" +
    "\064\012\uffbb\020\uffbb\022\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\051\uffbb\054\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\065\uffbb\067\uffbb\070\uffbb\071\uffbb\073\uffbb\075\uffbb" +
    "\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\104\uffbb\001" +
    "\002\000\004\051\205\001\002\000\106\004\121\005\066" +
    "\006\067\007\107\010\111\014\113\015\060\016\072\017" +
    "\063\021\102\024\110\032\112\033\075\034\117\035\062" +
    "\036\115\040\065\041\076\042\074\043\057\044\071\045" +
    "\101\051\073\052\103\055\120\056\116\057\064\064\100" +
    "\066\106\067\077\072\104\074\105\105\070\106\061\001" +
    "\002\000\064\012\uffb8\020\uffb8\022\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\051\uffb8\054\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\065\uffb8\067\uffb8\070\uffb8\071\uffb8\073\uffb8" +
    "\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\104" +
    "\uffb8\001\002\000\006\011\210\041\207\001\002\000\064" +
    "\012\uffb9\020\uffb9\022\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\051\uffb9\054\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9" +
    "\065\uffb9\067\uffb9\070\uffb9\071\uffb9\073\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\104\uffb9\001\002" +
    "\000\004\051\205\001\002\000\106\004\121\005\066\006" +
    "\067\007\107\010\111\014\113\015\060\016\072\017\063" +
    "\021\102\024\110\032\112\033\075\034\117\035\062\036" +
    "\115\040\065\041\076\042\074\043\057\044\071\045\101" +
    "\051\073\052\103\055\120\056\116\057\064\064\100\066" +
    "\106\067\077\072\104\074\105\105\070\106\061\001\002" +
    "\000\064\012\uffb6\020\uffb6\022\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\051\uffb6\054\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\065\uffb6\067\uffb6\070\uffb6\071\uffb6\073\uffb6\075" +
    "\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\104\uffb6" +
    "\001\002\000\064\012\uffb7\020\uffb7\022\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\051\uffb7\054\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\065\uffb7\067\uffb7\070\uffb7\071\uffb7\073" +
    "\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7" +
    "\104\uffb7\001\002\000\064\012\uffe2\020\uffe2\022\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\051\uffe2\054\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\065\uffe2\067\uffe2\070\uffe2\071" +
    "\uffe2\073\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2" +
    "\102\uffe2\104\uffe2\001\002\000\004\054\ufff5\001\002\000" +
    "\004\054\uffff\001\002\000\004\054\ufffb\001\002\000\004" +
    "\054\ufff7\001\002\000\004\047\221\001\002\000\066\012" +
    "\uffd3\020\uffd3\022\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\051\uffd3\054\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\065" +
    "\uffd3\067\uffd3\070\uffd3\071\uffd3\073\uffd3\075\uffd3\076\uffd3" +
    "\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\222\104\uffd3\001" +
    "\002\000\034\005\235\006\237\015\226\024\230\033\234" +
    "\034\240\035\224\036\236\040\231\041\225\047\232\051" +
    "\227\052\223\001\002\000\034\005\235\006\237\015\226" +
    "\024\230\033\234\034\240\035\224\036\236\040\231\041" +
    "\225\047\232\051\227\052\223\001\002\000\034\005\235" +
    "\006\237\015\226\024\230\033\234\034\240\035\224\036" +
    "\236\040\231\041\225\047\232\051\227\052\223\001\002" +
    "\000\034\005\235\006\237\015\226\024\230\033\234\034" +
    "\240\035\224\036\236\040\231\041\225\047\232\051\227" +
    "\052\223\001\002\000\034\005\235\006\237\015\226\024" +
    "\230\033\234\034\240\035\224\036\236\040\231\041\225" +
    "\047\232\051\227\052\223\001\002\000\034\005\235\006" +
    "\237\015\226\024\230\033\234\034\240\035\224\036\236" +
    "\040\231\041\225\047\232\051\227\052\223\001\002\000" +
    "\034\005\235\006\237\015\226\024\230\033\234\034\240" +
    "\035\224\036\236\040\231\041\225\047\232\051\227\052" +
    "\223\001\002\000\034\005\235\006\237\015\226\024\230" +
    "\033\234\034\240\035\224\036\236\040\231\041\225\047" +
    "\232\051\227\052\223\001\002\000\034\005\235\006\237" +
    "\015\226\024\230\033\234\034\240\035\224\036\236\040" +
    "\231\041\225\047\232\051\227\052\223\001\002\000\064" +
    "\012\uffd2\020\uffd2\022\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\051\uffd2\054\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\065\uffd2\067\uffd2\070\uffd2\071\uffd2\073\uffd2\075\uffd2\076" +
    "\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\104\uffd2\001\002" +
    "\000\034\005\235\006\237\015\226\024\230\033\234\034" +
    "\240\035\224\036\236\040\231\041\225\047\232\051\227" +
    "\052\223\001\002\000\034\005\235\006\237\015\226\024" +
    "\230\033\234\034\240\035\224\036\236\040\231\041\225" +
    "\047\232\051\227\052\223\001\002\000\034\005\235\006" +
    "\237\015\226\024\230\033\234\034\240\035\224\036\236" +
    "\040\231\041\225\047\232\051\227\052\223\001\002\000" +
    "\064\012\uffda\020\uffda\022\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\051\uffda\054\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\065\uffda\067\uffda\070\uffda\071\uffda\073\uffda\075\uffda" +
    "\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda\104\uffda\001" +
    "\002\000\034\005\235\006\237\015\226\024\230\033\234" +
    "\034\240\035\224\036\236\040\231\041\225\047\232\051" +
    "\227\052\223\001\002\000\064\012\uffdb\020\uffdb\022\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\051\uffdb\054\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\065\uffdb\067\uffdb\070\uffdb" +
    "\071\uffdb\073\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101" +
    "\uffdb\102\uffdb\104\uffdb\001\002\000\064\012\uffd4\020\uffd4" +
    "\022\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\051\uffd4\054" +
    "\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\065\uffd4\067\uffd4" +
    "\070\uffd4\071\uffd4\073\uffd4\075\uffd4\076\uffd4\077\uffd4\100" +
    "\uffd4\101\uffd4\102\uffd4\104\uffd4\001\002\000\064\012\uffdd" +
    "\020\uffdd\022\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\051" +
    "\uffdd\054\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\065\uffdd" +
    "\067\uffdd\070\uffdd\071\uffdd\073\uffdd\075\uffdd\076\uffdd\077" +
    "\uffdd\100\uffdd\101\uffdd\102\uffdd\104\uffdd\001\002\000\064" +
    "\012\uffdc\020\uffdc\022\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\051\uffdc\054\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\065\uffdc\067\uffdc\070\uffdc\071\uffdc\073\uffdc\075\uffdc\076" +
    "\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\104\uffdc\001\002" +
    "\000\064\012\uffde\020\uffde\022\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\051\uffde\054\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\065\uffde\067\uffde\070\uffde\071\uffde\073\uffde\075" +
    "\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\104\uffde" +
    "\001\002\000\064\012\uffd7\020\uffd7\022\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\051\uffd7\054\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\065\uffd7\067\uffd7\070\uffd7\071\uffd7\073" +
    "\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7" +
    "\104\uffd7\001\002\000\064\012\uffd6\020\uffd6\022\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\051\uffd6\054\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\065\uffd6\067\uffd6\070\uffd6\071" +
    "\uffd6\073\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\104\uffd6\001\002\000\064\012\uffe0\020\uffe0\022" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\051\uffe0\054\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\065\uffe0\067\uffe0\070" +
    "\uffe0\071\uffe0\073\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0" +
    "\101\uffe0\102\uffe0\104\uffe0\001\002\000\064\012\uffd5\020" +
    "\uffd5\022\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\051\uffd5" +
    "\054\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\065\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\073\uffd5\075\uffd5\076\uffd5\077\uffd5" +
    "\100\uffd5\101\uffd5\102\uffd5\104\uffd5\001\002\000\064\012" +
    "\uffdf\020\uffdf\022\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\051\uffdf\054\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\065" +
    "\uffdf\067\uffdf\070\uffdf\071\uffdf\073\uffdf\075\uffdf\076\uffdf" +
    "\077\uffdf\100\uffdf\101\uffdf\102\uffdf\104\uffdf\001\002\000" +
    "\064\012\uffd8\020\uffd8\022\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\051\uffd8\054\uffd8\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\065\uffd8\067\uffd8\070\uffd8\071\uffd8\073\uffd8\075\uffd8" +
    "\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\104\uffd8\001" +
    "\002\000\064\012\uffd9\020\uffd9\022\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\051\uffd9\054\uffd9\060\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\065\uffd9\067\uffd9\070\uffd9\071\uffd9\073\uffd9" +
    "\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\104" +
    "\uffd9\001\002\000\064\012\uffcb\020\uffcb\022\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\051\uffcb\054\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\065\uffcb\067\uffcb\070\uffcb\071\uffcb" +
    "\073\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102" +
    "\uffcb\104\uffcb\001\002\000\004\054\uffed\001\002\000\064" +
    "\012\uffc6\020\uffc6\022\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\051\uffc6\054\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\065\uffc6\067\uffc6\070\uffc6\071\uffc6\073\uffc6\075\uffc6\076" +
    "\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\104\uffc6\001\002" +
    "\000\004\054\uffef\001\002\000\004\054\uffeb\001\002\000" +
    "\004\054\ufff9\001\002\000\004\011\264\001\002\000\106" +
    "\004\121\005\066\006\067\007\107\010\111\014\113\015" +
    "\060\016\072\017\063\021\102\024\110\032\112\033\075" +
    "\034\117\035\062\036\115\040\065\041\076\042\074\043" +
    "\057\044\071\045\101\051\073\052\103\055\120\056\116" +
    "\057\064\064\100\066\106\067\077\072\104\074\105\105" +
    "\070\106\061\001\002\000\106\004\121\005\066\006\067" +
    "\007\107\010\111\014\113\015\060\016\072\017\063\021" +
    "\102\024\110\032\112\033\075\034\117\035\062\036\115" +
    "\040\065\041\076\042\074\043\057\044\071\045\101\051" +
    "\073\052\103\055\120\056\116\057\064\064\100\066\106" +
    "\067\077\072\104\074\105\105\070\106\061\001\002\000" +
    "\064\012\uffc8\020\uffc8\022\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\051\uffc8\054\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\065\uffc8\067\uffc8\070\uffc8\071\uffc8\073\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\104\uffc8\001" +
    "\002\000\064\012\uffcd\020\uffcd\022\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\051\uffcd\054\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\065\uffcd\067\uffcd\070\uffcd\071\uffcd\073\uffcd" +
    "\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\104" +
    "\uffcd\001\002\000\064\012\uffc5\020\uffc5\022\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\051\uffc5\054\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\065\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\073\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102" +
    "\uffc5\104\uffc5\001\002\000\004\054\ufffd\001\002\000\004" +
    "\002\000\001\002\000\064\012\uffe3\020\uffe3\022\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\051\uffe3\054\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\065\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\073\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3" +
    "\102\uffe3\104\uffe3\001\002\000\066\012\uffcf\020\uffcf\022" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\051\uffcf\054\uffcf" +
    "\060\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf\067\uffcf\070" +
    "\uffcf\071\uffcf\073\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf" +
    "\101\uffcf\102\uffcf\103\275\104\uffcf\001\002\000\034\005" +
    "\235\006\237\015\226\024\230\033\234\034\240\035\224" +
    "\036\236\040\231\041\225\047\232\051\227\052\223\001" +
    "\002\000\064\012\uffd0\020\uffd0\022\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\051\uffd0\054\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0" +
    "\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\104" +
    "\uffd0\001\002\000\064\012\uffc2\020\uffc2\022\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\051\uffc2\054\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\065\uffc2\067\uffc2\070\uffc2\071\uffc2" +
    "\073\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102" +
    "\uffc2\104\uffc2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\002\003\001\001\000\002\001\001\000" +
    "\040\003\012\005\032\007\043\010\022\011\033\015\034" +
    "\016\053\017\013\020\050\021\024\022\023\023\046\027" +
    "\031\030\026\031\045\001\001\000\004\025\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\272\001\001\000\002\001\001\000\040\003\270" +
    "\005\032\007\043\010\022\011\033\015\034\016\053\017" +
    "\013\020\050\021\024\022\023\023\046\027\031\030\026" +
    "\031\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\266\001\001" +
    "\000\002\001\001\000\040\003\261\005\032\007\043\010" +
    "\022\011\033\015\034\016\053\017\013\020\050\021\024" +
    "\022\023\023\046\027\031\030\026\031\045\001\001\000" +
    "\040\003\260\005\032\007\043\010\022\011\033\015\034" +
    "\016\053\017\013\020\050\021\024\022\023\023\046\027" +
    "\031\030\026\031\045\001\001\000\040\003\257\005\032" +
    "\007\043\010\022\011\033\015\034\016\053\017\013\020" +
    "\050\021\024\022\023\023\046\027\031\030\026\031\045" +
    "\001\001\000\004\025\256\001\001\000\040\003\255\005" +
    "\032\007\043\010\022\011\033\015\034\016\053\017\013" +
    "\020\050\021\024\022\023\023\046\027\031\030\026\031" +
    "\045\001\001\000\004\026\254\001\001\000\002\001\001" +
    "\000\040\003\216\005\032\007\043\010\022\011\033\015" +
    "\034\016\053\017\013\020\050\021\024\022\023\023\046" +
    "\027\031\030\026\031\045\001\001\000\040\003\215\005" +
    "\032\007\043\010\022\011\033\015\034\016\053\017\013" +
    "\020\050\021\024\022\023\023\046\027\031\030\026\031" +
    "\045\001\001\000\040\003\214\005\032\007\043\010\022" +
    "\011\033\015\034\016\053\017\013\020\050\021\024\022" +
    "\023\023\046\027\031\030\026\031\045\001\001\000\040" +
    "\003\213\005\032\007\043\010\022\011\033\015\034\016" +
    "\053\017\013\020\050\021\024\022\023\023\046\027\031" +
    "\030\026\031\045\001\001\000\002\001\001\000\004\025" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\162\001\001\000\002\001\001\000\040\003\161\005" +
    "\032\007\043\010\022\011\033\015\034\016\053\017\013" +
    "\020\050\021\024\022\023\023\046\027\031\030\026\031" +
    "\045\001\001\000\004\025\160\001\001\000\040\003\157" +
    "\005\032\007\043\010\022\011\033\015\034\016\053\017" +
    "\013\020\050\021\024\022\023\023\046\027\031\030\026" +
    "\031\045\001\001\000\040\003\156\005\032\007\043\010" +
    "\022\011\033\015\034\016\053\017\013\020\050\021\024" +
    "\022\023\023\046\027\031\030\026\031\045\001\001\000" +
    "\004\025\155\001\001\000\040\003\154\005\032\007\043" +
    "\010\022\011\033\015\034\016\053\017\013\020\050\021" +
    "\024\022\023\023\046\027\031\030\026\031\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\054\005" +
    "\032\007\043\010\022\011\033\015\034\016\053\017\013" +
    "\020\050\021\024\022\023\023\046\027\031\030\026\031" +
    "\045\001\001\000\002\001\001\000\004\025\113\001\001" +
    "\000\004\025\153\001\001\000\004\025\152\001\001\000" +
    "\002\001\001\000\004\025\151\001\001\000\004\025\150" +
    "\001\001\000\004\025\147\001\001\000\004\025\146\001" +
    "\001\000\004\025\145\001\001\000\004\025\144\001\001" +
    "\000\002\001\001\000\004\025\143\001\001\000\004\025" +
    "\142\001\001\000\004\025\141\001\001\000\004\025\140" +
    "\001\001\000\004\025\137\001\001\000\004\025\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\135" +
    "\001\001\000\004\025\134\001\001\000\004\025\133\001" +
    "\001\000\002\001\001\000\004\025\132\001\001\000\004" +
    "\025\131\001\001\000\004\025\130\001\001\000\004\025" +
    "\127\001\001\000\004\025\126\001\001\000\002\001\001" +
    "\000\004\025\125\001\001\000\002\001\001\000\004\025" +
    "\124\001\001\000\004\025\123\001\001\000\004\025\122" +
    "\001\001\000\004\025\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\205\001\001\000\004\025" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\211\001\001\000\004\025\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\232\001\001\000\004\026\253\001\001\000\004\026" +
    "\252\001\001\000\004\026\251\001\001\000\004\026\250" +
    "\001\001\000\004\026\247\001\001\000\004\026\246\001" +
    "\001\000\004\026\245\001\001\000\004\026\244\001\001" +
    "\000\002\001\001\000\004\026\243\001\001\000\004\026" +
    "\242\001\001\000\004\026\241\001\001\000\002\001\001" +
    "\000\004\026\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\264\001\001\000\004\025" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
     
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
  public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

 public int contador=1;
 public int contador2=1;
public int contadorelif=1;
public int contadorsegun=0;
  public String tab="";
 public String tab3="";
public String dowh="";
public String declara="";
public boolean verswitch,ifbo,dow=false;
public String dowhile="";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= INICIO SENTENCIA FIN 
            {
              Object RESULT =null;
		   System.out.println(Ventana.python);
System.out.println(Ventana.goolan);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION SENTENCIA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= CONDICIONAL_FOR SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= CONDICIONAL_FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ASIGNACION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IMPRESIONES SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IMPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= COMENTARIO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= CONDICIONAL_IF SENTENCIA 
            {
              Object RESULT =null;
		



System.out.println(Ventana.python);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= CONDICIONAL_IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= CONDICIONAL_MULTIPLE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= CONDICIONAL_MULTIPLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= CONDICIONAL_WHILE SENTENCIA 
            {
              Object RESULT =null;
		System.out.println(Ventana.python);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= CONDICIONAL_WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= CONDICIONAL_DOWHILE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= CONDICIONAL_DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= RETURN SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= CONDICIONAL_METODO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= CONDICIONAL_METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= CONDICIONAL_FUNCION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= CONDICIONAL_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= LLAMADA SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= IMPRESION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPRESION ::= IMPRIMIR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

Ventana.goolan=Ventana.goolan+tab3+"fmt.print("+a+") \n";
Ventana.python=Ventana.python+tab+"print("+a+") \n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMPRESION ::= IMPRIMIR_NL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.goolan=Ventana.goolan+tab3+"fmt.println("+a+") \n";
Ventana.python=Ventana.python+tab+"print("+a+") \n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LLAMADA ::= EJECUTAR iDENTIFICADOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

Ventana.goolan=Ventana.goolan+tab3+a+b+""+"\n";
Ventana.python=Ventana.python+tab+a+b+""+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODO_EXPRE ::= iDENTIFICADOR METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODO_EXPRE ::= COMA METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODO_EXPRE ::= T_dato METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=" "+a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO_EXPRE ::= PARIZQ METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODO_EXPRE ::= menor METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODO_EXPRE ::= mayor METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODO_EXPRE ::= PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODO_EXPRE ::= cADENA METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODO_EXPRE ::= DECIMAL METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODO_EXPRE ::= Op_booleano METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METODO_EXPRE ::= ENTERO METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODO_EXPRE ::= MENOS METODO_EXPRE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String a="-"+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODO_EXPRE ::= cHAR METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_EXPRE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICIONAL_FUNCION ::= Funcion iDENTIFICADOR T_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador==2){
tab3="";
Ventana.goolan=Ventana.goolan+tab;
tab3="   ";
}else{


Ventana.goolan=Ventana.goolan+tab3;
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}

contador2=contador2+1;
Ventana.goolan=Ventana.goolan+"func"+a+"() "+b+"{"+"\n";
if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{


Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

contador=contador+1;
Ventana.python=Ventana.python+"def "+a+"()"+":"+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICIONAL_FUNCION ::= Funcion iDENTIFICADOR T_dato Con_parametros METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(contador==2){
tab3="";
Ventana.goolan=Ventana.goolan+tab;
tab3="   ";
}else{


Ventana.goolan=Ventana.goolan+tab3;
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}

contador2=contador2+1;
Ventana.goolan=Ventana.goolan+"func"+a+b+" "+c+"{"+"\n";


if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{


Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

contador=contador+1;
Ventana.python=Ventana.python+"def "+a+""+b+":"+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICIONAL_FUNCION ::= Fin_funcion 
            {
              Object RESULT =null;
		
contador2=contador2-1;
if(contador2==1){
tab3="";
}else{
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}


contador=contador-1;
 if(contador==1){
tab="";
}else{ 

tab="";
       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICIONAL_METODO ::= Metodo iDENTIFICADOR Con_parametros METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(contador==2){
tab3="";
Ventana.goolan=Ventana.goolan+tab;
tab3="   ";
}else{


Ventana.goolan=Ventana.goolan+tab3;
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}

contador2=contador2+1;
Ventana.goolan=Ventana.goolan+"func"+a+b+"{"+"\n";

if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{


Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

contador=contador+1;
Ventana.python=Ventana.python+"def "+a+""+b+":"+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICIONAL_METODO ::= Metodo iDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(contador==2){
tab3="";
Ventana.goolan=Ventana.goolan+tab;
tab3="   ";
}else{


Ventana.goolan=Ventana.goolan+tab3;
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}

contador2=contador2+1;
Ventana.goolan=Ventana.goolan+"func"+a+"(){"+"\n";


if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{


Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

contador=contador+1;
Ventana.python=Ventana.python+"def "+a+"()"+":"+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICIONAL_METODO ::= Fin_metodo 
            {
              Object RESULT =null;
		
contador2=contador2-1;
if(contador2==1){
tab3="";
Ventana.goolan=Ventana.goolan+"}"+"\n";
}else{
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}

contador=contador-1;
 if(contador==1){
tab="";
}else{ 

tab="";
       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_METODO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETURN ::= Retornar EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.goolan=Ventana.goolan+tab3+"return"+a+"\n";
Ventana.python=Ventana.python+tab+"return"+a+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICIONAL_DOWHILE ::= Repetir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador2==1){

tab3="";
Ventana.goolan=Ventana.goolan+tab3;
}else{
Ventana.goolan=Ventana.goolan+tab3;
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}

}
if(contador==1){

tab="";
Ventana.python=Ventana.python+tab;
}else{
Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}

}
dowhile=Ventana.goolan;
            Ventana.goolan="";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_DOWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONAL_DOWHILE ::= Hasta_que METODO_EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

String aux="";
aux=Ventana.goolan;
Ventana.goolan="";
Ventana.goolan="for true{"+"\n"+"   if"+a+"{"+"\n"+"  break"+"\n"+"}"+" "+aux+"\n"+"}";

contador2=contador2-1;
contador=contador-1;
if(contador==1){
tab="";
}else{
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

if(contador2==1){
tab3="";
}else{
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_DOWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICIONAL_WHILE ::= Mientras EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(contador==2){
tab3="";
Ventana.goolan=Ventana.goolan+tab3;
tab3="" ;
}else{
Ventana.goolan=Ventana.goolan+tab3;
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}

contador2=contador2+1;
Ventana.goolan=Ventana.goolan+"for true{"+"\n"+"  if"+a+"{"+"\n"+"  break"+"\n"+"}"+"\n";

if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{
Ventana.python=Ventana.python+tab;
    tab="";
 for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}

}contador=contador+1;
Ventana.python=Ventana.python+"while ("+a+"):"+"\n";
System.out.println(Ventana.python);


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONAL_WHILE ::= Fin_mientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

contador2=contador2-1;
if(contador2==1){
tab3="";
}else{
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}

Ventana.goolan=Ventana.goolan+"}"+"\n";
String hola=a;
contador=contador-1;
 if(contador==1){
tab="";
}else{ 

tab="";
       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

System.out.println(Ventana.python);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONAL_FOR ::= Para iDENTIFICADOR FLECHA EXPRESION EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

contador2=contador2+1;
if(contador2==1){
tab3="";
Ventana.goolan=Ventana.goolan+tab3;
tab3="   ";
}else{
Ventana.goolan=Ventana.goolan+tab3;
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}
contador=contador+1;
Ventana.goolan=Ventana.goolan+"for "+a+";"+b+";"+c+"{"+"\n";



              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONAL_FOR ::= Fin_para 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
contador2=contador2-1;
if(contador2==1){
tab3="";
}else{
Ventana.goolan=Ventana.goolan+tab3;
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}

Ventana.goolan=Ventana.goolan+tab3+"}";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICIONAL_MULTIPLE ::= Segun EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(contador2==1){
tab3="";
Ventana.goolan=Ventana.goolan+tab3;

}else{
Ventana.goolan=Ventana.goolan+tab3;
tab3="";       for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}
contador2=contador2+1;

Ventana.goolan=Ventana.goolan+"switch"+a+"{"+"\n";
System.out.println("entroooooo");



System.out.println(a);




System.out.println(Ventana.python);


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_MULTIPLE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICIONAL_MULTIPLE ::= De_lo_contrario Entonces 
            {
              Object RESULT =null;
		
if(contador2==1){
tab3="";
Ventana.goolan=Ventana.goolan+tab3;

}else{
Ventana.goolan=Ventana.goolan+tab3;
tab3="";       for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}
contador2=contador2+1;

Ventana.goolan=Ventana.goolan+"default:"+"\n";



contadorsegun=contadorsegun+1;
if(contador==1){ 

     tab="";
Ventana.python=Ventana.python+tab;

for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

else {

Ventana.python=Ventana.python+tab;
tab="";

       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}
contador=contador+1;
Ventana.python=Ventana.python+"else"+":"+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_MULTIPLE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICIONAL_MULTIPLE ::= Fin_segun 
            {
              Object RESULT =null;
		
contador2=contador2-2;
if(contador2==1){
tab="";
Ventana.goolan=Ventana.goolan+'}'+"\n";
}
else{ 

tab3="";
       for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   

}contador2=contador2+1;
}



contador=contador-1;
contadorsegun=contadorsegun-1;
if(contador==1){

}else{

}
if(contadorsegun==-1){
verswitch=false;
}

    if(contador==1){
tab="";
}else{ 

tab="";
       for (int i = 0; i < contador-1; i++) {
            tab=tab+"   ";   
}
}


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_MULTIPLE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICIONAL_MULTIPLE ::= interc EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador2==1){
tab3="";
Ventana.goolan=Ventana.goolan+tab3;

}else{
Ventana.goolan=Ventana.goolan+tab3;
tab3="";       for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}
contador2=contador2+1;


Ventana.goolan=Ventana.goolan+"case"+a+":"+"\n";

contadorsegun=contadorsegun+1;
if(contador==1){ 

     tab="";
Ventana.python=Ventana.python+tab;

for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

else {

Ventana.python=Ventana.python+tab;
tab="";

       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}
contador=contador+1;
if(verswitch==false){
verswitch=true;
Ventana.python=Ventana.python+"if x=="+a+":"+"\n";
}else{
Ventana.python=Ventana.python+"elif x=="+a+":"+"\n";
}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_MULTIPLE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICIONAL_IF ::= Condicional_si EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador2==1){
tab3="";
Ventana.goolan=Ventana.goolan+tab3;
tab3=""  ;
}else{
Ventana.goolan=Ventana.goolan+tab3;
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}


}
contador2=contador2+1;

Ventana.goolan=Ventana.goolan+"\n"+"if"+a+"{"+"\n";
System.out.println(Ventana.goolan);



if (contador==1){
tab="";
Ventana.python=Ventana.python+tab;
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}


}else{
Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}

}



contador=contador+1;
Ventana.python=Ventana.python+"if "+a+":"+"\n";
System.out.println(Ventana.python);


 


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICIONAL_IF ::= O_si EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador2==2){
tab3="";
Ventana.goolan=Ventana.goolan+tab3;
tab3=""  ;
}else{

Ventana.goolan=Ventana.goolan+tab3;
tab3="";
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}
contador2=contador2+1;

Ventana.goolan=Ventana.goolan+"\n"+"else if "+a+ " {" + "\n";
System.out.println(Ventana.goolan);


if(contador==2){

tab="";

Ventana.python=Ventana.python+tab;
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}

}else{
Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}


contador=contador+1;
Ventana.python=Ventana.python+"elif "+a+":"+"\n";
System.out.println(Ventana.python);


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICIONAL_IF ::= Fin_osi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

contador2=contador2-1;
tab3="";
if(contador2==1){
tab3="  ";

}else{
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}



Ventana.goolan=Ventana.goolan+"}"+"\n";


contador=contador-1;
tab="";
if(contador==2){
tab="   ";

}else{

for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   


}



}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICIONAL_IF ::= Fin_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

contador2=contador2-1;
if(contador2==1){
tab3="";

}else{
for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}
Ventana.goolan=Ventana.goolan+'}'+"\n";

if(contador==1){
tab="";
ifbo=false;
}else{
if(ifbo==true){
contador=contador+1;
}
contador=contador-2;
tab="";
ifbo=true;
for (int i = 0; i <contador; i++) {
            tab=tab+"   ";   
}
}

   

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICIONAL_IF ::= De_lo_contrario 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(contador2==1){
tab3="";
Ventana.goolan=Ventana.goolan+tab3;

}else{
Ventana.goolan=Ventana.goolan+tab3;
tab3="";       for (int i = 0; i < contador2; i++) {
            tab3=tab3+"   ";   
}
}
contador2=contador2+1;

Ventana.goolan=Ventana.goolan+"default:"+"\n";




if(contador==1){ 

     tab="";
Ventana.python=Ventana.python+tab;

for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

else {

Ventana.python=Ventana.python+tab;
tab="";

       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}
contador=contador+1;
Ventana.python=Ventana.python+"else"+":"+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= INGRESAR iDENTIFICADOR COMA DECLARACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

Ventana.goolan=Ventana.goolan+tab3+"var "+a+","+declara+"\n";
declara="";
Ventana.python=Ventana.python+tab+a+","+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= INGRESAR iDENTIFICADOR COMO T_dato CON_VALOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		



Ventana.goolan=Ventana.goolan+tab3+"var "+a+" "+p+"="+b+"\n";
System.out.println(Ventana.goolan);
Ventana.python=Ventana.python+tab+a+"="+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION1 ::= iDENTIFICADOR COMA DECLARACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aux="";
aux=declara;
declara="";
declara=a+","+aux;
a=a+","+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION1",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION1 ::= iDENTIFICADOR COMO T_dato CON_VALOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
declara=a+" "+p+"="+b;
a=a+"="+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION1",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION ::= iDENTIFICADOR COMA ASIGNACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.goolan=Ventana.goolan+tab3+a+","+declara+"\n";
declara="";
Ventana.python=Ventana.python+tab+a+","+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION ::= iDENTIFICADOR FLECHA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.python=Ventana.python+tab+a+"="+b+"\n";
  Ventana.goolan=Ventana.goolan+tab3+a+"="+b+"\n";

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION1 ::= iDENTIFICADOR COMA ASIGNACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aux="";
aux=declara;
declara="";
declara=a+","+aux;
a=a+","+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION1 ::= iDENTIFICADOR FLECHA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
declara=a+"="+b;
a=a+"="+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= cM_MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= cM_LINE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= ENTERO EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= Op_booleano EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= MENOS EXPRESION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String a="-"+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= DECIMAL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= Modulo EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= Mayorigual EXPRESION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa=">="+b;
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= menorigual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="<="+b;
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= esiGual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="=="+b;
System.out.println(aa);
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= intera EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="";
System.out.println(aa);
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= esdifeErente EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="!="+b;
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= Potencia EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= CORIZQ EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= CORDER EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= cADENA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= cHAR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= iDENTIFICADOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= MAS EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= POR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= DIVIDIDO EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= PARIZQ EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= PARDER EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= COMA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= menor EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= mayor EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= admiracionb EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= admiraciona EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= PTCOMA 
            {
              Object RESULT =null;
		
String b="";
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= Entonces 
            {
              Object RESULT =null;
		
String b="";
System.out.println("llego");
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= Hacer 
            {
              Object RESULT =null;
		
String b="";
System.out.println("llegox2");
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= Fin_si 
            {
              Object RESULT =null;
		
String b="";
System.out.println("llego");
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= andd EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=" "+"and "+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= Hasta 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a="";
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
