
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import analizadores.Ventana;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\021\003\000\002\020\004\000" +
    "\002\020\003\000\002\017\010\000\002\016\004\000\002" +
    "\016\003\000\002\016\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\015\003\000\002\011\006" +
    "\000\002\011\010\000\002\012\005\000\002\012\007\000" +
    "\002\005\005\000\002\005\005\000\002\006\005\000\002" +
    "\006\005\000\002\023\003\000\002\023\003\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\053\005\001\002\000\004\002\204\001" +
    "\002\000\034\012\021\020\006\022\023\031\010\051\020" +
    "\060\030\061\017\062\011\063\031\067\025\070\026\075" +
    "\016\102\033\001\002\000\004\051\166\001\002\000\036" +
    "\012\021\020\006\022\023\031\010\051\020\054\uffee\060" +
    "\030\061\017\062\011\063\031\067\025\070\026\075\016" +
    "\102\033\001\002\000\036\012\uffe4\020\uffe4\022\uffe4\031" +
    "\uffe4\051\uffe4\054\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\067\uffe4\070\uffe4\075\uffe4\102\uffe4\001\002\000\104\004" +
    "\100\005\046\006\047\007\067\010\071\014\074\015\040" +
    "\016\052\017\043\021\062\024\070\033\055\034\076\035" +
    "\042\036\073\040\045\041\056\042\054\043\037\044\051" +
    "\045\061\051\053\052\063\055\077\056\075\057\044\064" +
    "\060\066\066\067\057\072\064\074\065\105\050\106\041" +
    "\001\002\000\036\012\021\020\006\022\023\031\010\051" +
    "\020\054\ufff2\060\030\061\017\062\011\063\031\067\025" +
    "\070\026\075\016\102\033\001\002\000\004\054\162\001" +
    "\002\000\036\012\021\020\006\022\023\031\010\051\020" +
    "\054\ufffe\060\030\061\017\062\011\063\031\067\025\070" +
    "\026\075\016\102\033\001\002\000\036\012\021\020\006" +
    "\022\023\031\010\051\020\054\ufff6\060\030\061\017\062" +
    "\011\063\031\067\025\070\026\075\016\102\033\001\002" +
    "\000\104\004\100\005\046\006\047\007\067\010\071\014" +
    "\074\015\040\016\052\017\043\021\062\024\070\033\055" +
    "\034\076\035\042\036\073\040\045\041\056\042\054\043" +
    "\037\044\051\045\061\051\053\052\063\055\077\056\075" +
    "\057\044\064\060\066\066\067\057\072\064\074\065\105" +
    "\050\106\041\001\002\000\104\004\100\005\046\006\047" +
    "\007\067\010\071\014\074\015\040\016\052\017\043\021" +
    "\062\024\070\033\055\034\076\035\042\036\073\040\045" +
    "\041\056\042\054\043\037\044\051\045\061\051\053\052" +
    "\063\055\077\056\075\057\044\064\060\066\066\067\057" +
    "\072\064\074\065\105\050\106\041\001\002\000\006\011" +
    "\141\041\142\001\002\000\036\012\uffe8\020\uffe8\022\uffe8" +
    "\031\uffe8\051\uffe8\054\uffe8\060\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\067\uffe8\070\uffe8\075\uffe8\102\uffe8\001\002\000\036" +
    "\012\021\020\006\022\023\031\010\051\020\054\ufffc\060" +
    "\030\061\017\062\011\063\031\067\025\070\026\075\016" +
    "\102\033\001\002\000\104\004\100\005\046\006\047\007" +
    "\067\010\071\014\074\015\040\016\052\017\043\021\062" +
    "\024\070\033\055\034\076\035\042\036\073\040\045\041" +
    "\056\042\054\043\037\044\051\045\061\051\053\052\063" +
    "\055\077\056\075\057\044\064\060\066\066\067\057\072" +
    "\064\074\065\105\050\106\041\001\002\000\036\012\021" +
    "\020\006\022\023\031\010\051\020\054\ufffa\060\030\061" +
    "\017\062\011\063\031\067\025\070\026\075\016\102\033" +
    "\001\002\000\036\012\uffe3\020\uffe3\022\uffe3\031\uffe3\051" +
    "\uffe3\054\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\067\uffe3" +
    "\070\uffe3\075\uffe3\102\uffe3\001\002\000\036\012\uffed\020" +
    "\uffed\022\uffed\031\uffed\051\uffed\054\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\067\uffed\070\uffed\075\uffed\102\uffed\001" +
    "\002\000\036\012\021\020\006\022\023\031\010\051\020" +
    "\054\ufff4\060\030\061\017\062\011\063\031\067\025\070" +
    "\026\075\016\102\033\001\002\000\104\004\100\005\046" +
    "\006\047\007\067\010\071\014\074\015\040\016\052\017" +
    "\043\021\062\024\070\033\055\034\076\035\042\036\073" +
    "\040\045\041\056\042\054\043\037\044\051\045\061\051" +
    "\053\052\063\055\077\056\075\057\044\064\060\066\066" +
    "\067\057\072\064\074\065\105\050\106\041\001\002\000" +
    "\104\004\100\005\046\006\047\007\067\010\071\014\074" +
    "\015\040\016\052\017\043\021\062\024\070\033\055\034" +
    "\076\035\042\036\073\040\045\041\056\042\054\043\037" +
    "\044\051\045\061\051\053\052\063\055\077\056\075\057" +
    "\044\064\060\066\066\067\057\072\064\074\065\105\050" +
    "\106\041\001\002\000\036\012\021\020\006\022\023\031" +
    "\010\051\020\054\ufff0\060\030\061\017\062\011\063\031" +
    "\067\025\070\026\075\016\102\033\001\002\000\036\012" +
    "\uffeb\020\uffeb\022\uffeb\031\uffeb\051\uffeb\054\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\067\uffeb\070\uffeb\075\uffeb\102" +
    "\uffeb\001\002\000\036\012\021\020\006\022\023\031\010" +
    "\051\020\054\ufff8\060\030\061\017\062\011\063\031\067" +
    "\025\070\026\075\016\102\033\001\002\000\004\054\ufff9" +
    "\001\002\000\004\054\ufff1\001\002\000\104\004\100\005" +
    "\046\006\047\007\067\010\071\014\074\015\040\016\052" +
    "\017\043\021\062\024\070\033\055\034\076\035\042\036" +
    "\073\040\045\041\056\042\054\043\037\044\051\045\061" +
    "\051\053\052\063\055\077\056\075\057\044\064\060\066" +
    "\066\067\057\072\064\074\065\105\050\106\041\001\002" +
    "\000\104\004\100\005\046\006\047\007\067\010\071\014" +
    "\074\015\040\016\052\017\043\021\062\024\070\033\055" +
    "\034\076\035\042\036\073\040\045\041\056\042\054\043" +
    "\037\044\051\045\061\051\053\052\063\055\077\056\075" +
    "\057\044\064\060\066\066\067\057\072\064\074\065\105" +
    "\050\106\041\001\002\000\042\011\uffda\012\uffda\020\uffda" +
    "\022\uffda\031\uffda\032\uffda\051\uffda\054\uffda\060\uffda\061" +
    "\uffda\062\uffda\063\uffda\067\uffda\070\uffda\075\uffda\102\uffda" +
    "\001\002\000\104\004\100\005\046\006\047\007\067\010" +
    "\071\014\074\015\040\016\052\017\043\021\062\024\070" +
    "\033\055\034\076\035\042\036\073\040\045\041\056\042" +
    "\054\043\037\044\051\045\061\051\053\052\063\055\077" +
    "\056\075\057\044\064\060\066\066\067\057\072\064\074" +
    "\065\105\050\106\041\001\002\000\104\004\100\005\046" +
    "\006\047\007\067\010\071\014\074\015\040\016\052\017" +
    "\043\021\062\024\070\033\055\034\076\035\042\036\073" +
    "\040\045\041\056\042\054\043\037\044\051\045\061\051" +
    "\053\052\063\055\077\056\075\057\044\064\060\066\066" +
    "\067\057\072\064\074\065\105\050\106\041\001\002\000" +
    "\104\004\100\005\046\006\047\007\067\010\071\014\074" +
    "\015\040\016\052\017\043\021\062\024\070\033\055\034" +
    "\076\035\042\036\073\040\045\041\056\042\054\043\037" +
    "\044\051\045\061\051\053\052\063\055\077\056\075\057" +
    "\044\064\060\066\066\067\057\072\064\074\065\105\050" +
    "\106\041\001\002\000\104\004\100\005\046\006\047\007" +
    "\067\010\071\014\074\015\040\016\052\017\043\021\062" +
    "\024\070\033\055\034\076\035\042\036\073\040\045\041" +
    "\056\042\054\043\037\044\051\045\061\051\053\052\063" +
    "\055\077\056\075\057\044\064\060\066\066\067\057\072" +
    "\064\074\065\105\050\106\041\001\002\000\104\004\100" +
    "\005\046\006\047\007\067\010\071\014\074\015\040\016" +
    "\052\017\043\021\062\024\070\033\055\034\076\035\042" +
    "\036\073\040\045\041\056\042\054\043\037\044\051\045" +
    "\061\051\053\052\063\055\077\056\075\057\044\064\060" +
    "\066\066\067\057\072\064\074\065\105\050\106\041\001" +
    "\002\000\104\004\100\005\046\006\047\007\067\010\071" +
    "\014\074\015\040\016\052\017\043\021\062\024\070\033" +
    "\055\034\076\035\042\036\073\040\045\041\056\042\054" +
    "\043\037\044\051\045\061\051\053\052\063\055\077\056" +
    "\075\057\044\064\060\066\066\067\057\072\064\074\065" +
    "\105\050\106\041\001\002\000\042\011\uffd9\012\uffd9\020" +
    "\uffd9\022\uffd9\031\uffd9\032\uffd9\051\uffd9\054\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\067\uffd9\070\uffd9\075\uffd9\102" +
    "\uffd9\001\002\000\104\004\100\005\046\006\047\007\067" +
    "\010\071\014\074\015\040\016\052\017\043\021\062\024" +
    "\070\033\055\034\076\035\042\036\073\040\045\041\056" +
    "\042\054\043\037\044\051\045\061\051\053\052\063\055" +
    "\077\056\075\057\044\064\060\066\066\067\057\072\064" +
    "\074\065\105\050\106\041\001\002\000\104\004\100\005" +
    "\046\006\047\007\067\010\071\014\074\015\040\016\052" +
    "\017\043\021\062\024\070\033\055\034\076\035\042\036" +
    "\073\040\045\041\056\042\054\043\037\044\051\045\061" +
    "\051\053\052\063\055\077\056\075\057\044\064\060\066" +
    "\066\067\057\072\064\074\065\105\050\106\041\001\002" +
    "\000\104\004\100\005\046\006\047\007\067\010\071\014" +
    "\074\015\040\016\052\017\043\021\062\024\070\033\055" +
    "\034\076\035\042\036\073\040\045\041\056\042\054\043" +
    "\037\044\051\045\061\051\053\052\063\055\077\056\075" +
    "\057\044\064\060\066\066\067\057\072\064\074\065\105" +
    "\050\106\041\001\002\000\104\004\100\005\046\006\047" +
    "\007\067\010\071\014\074\015\040\016\052\017\043\021" +
    "\062\024\070\033\055\034\076\035\042\036\073\040\045" +
    "\041\056\042\054\043\037\044\051\045\061\051\053\052" +
    "\063\055\077\056\075\057\044\064\060\066\066\067\057" +
    "\072\064\074\065\105\050\106\041\001\002\000\104\004" +
    "\100\005\046\006\047\007\067\010\071\014\074\015\040" +
    "\016\052\017\043\021\062\024\070\033\055\034\076\035" +
    "\042\036\073\040\045\041\056\042\054\043\037\044\051" +
    "\045\061\051\053\052\063\055\077\056\075\057\044\064" +
    "\060\066\066\067\057\072\064\074\065\105\050\106\041" +
    "\001\002\000\104\004\100\005\046\006\047\007\067\010" +
    "\071\014\074\015\040\016\052\017\043\021\062\024\070" +
    "\033\055\034\076\035\042\036\073\040\045\041\056\042" +
    "\054\043\037\044\051\045\061\051\053\052\063\055\077" +
    "\056\075\057\044\064\060\066\066\067\057\072\064\074" +
    "\065\105\050\106\041\001\002\000\042\011\uffbb\012\uffbb" +
    "\020\uffbb\022\uffbb\031\uffbb\032\uffbb\051\uffbb\054\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\067\uffbb\070\uffbb\075\uffbb" +
    "\102\uffbb\001\002\000\042\011\uffbc\012\uffbc\020\uffbc\022" +
    "\uffbc\031\uffbc\032\uffbc\051\uffbc\054\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\067\uffbc\070\uffbc\075\uffbc\102\uffbc\001" +
    "\002\000\104\004\100\005\046\006\047\007\067\010\071" +
    "\014\074\015\040\016\052\017\043\021\062\024\070\033" +
    "\055\034\076\035\042\036\073\040\045\041\056\042\054" +
    "\043\037\044\051\045\061\051\053\052\063\055\077\056" +
    "\075\057\044\064\060\066\066\067\057\072\064\074\065" +
    "\105\050\106\041\001\002\000\104\004\100\005\046\006" +
    "\047\007\067\010\071\014\074\015\040\016\052\017\043" +
    "\021\062\024\070\033\055\034\076\035\042\036\073\040" +
    "\045\041\056\042\054\043\037\044\051\045\061\051\053" +
    "\052\063\055\077\056\075\057\044\064\060\066\066\067" +
    "\057\072\064\074\065\105\050\106\041\001\002\000\104" +
    "\004\100\005\046\006\047\007\067\010\071\014\074\015" +
    "\040\016\052\017\043\021\062\024\070\033\055\034\076" +
    "\035\042\036\073\040\045\041\056\042\054\043\037\044" +
    "\051\045\061\051\053\052\063\055\077\056\075\057\044" +
    "\064\060\066\066\067\057\072\064\074\065\105\050\106" +
    "\041\001\002\000\042\011\uffbd\012\uffbd\020\uffbd\022\uffbd" +
    "\031\uffbd\032\uffbd\051\uffbd\054\uffbd\060\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\067\uffbd\070\uffbd\075\uffbd\102\uffbd\001\002" +
    "\000\104\004\100\005\046\006\047\007\067\010\071\014" +
    "\074\015\040\016\052\017\043\021\062\024\070\033\055" +
    "\034\076\035\042\036\073\040\045\041\056\042\054\043" +
    "\037\044\051\045\061\051\053\052\063\055\077\056\075" +
    "\057\044\064\060\066\066\067\057\072\064\074\065\105" +
    "\050\106\041\001\002\000\104\004\100\005\046\006\047" +
    "\007\067\010\071\014\074\015\040\016\052\017\043\021" +
    "\062\024\070\033\055\034\076\035\042\036\073\040\045" +
    "\041\056\042\054\043\037\044\051\045\061\051\053\052" +
    "\063\055\077\056\075\057\044\064\060\066\066\067\057" +
    "\072\064\074\065\105\050\106\041\001\002\000\104\004" +
    "\100\005\046\006\047\007\067\010\071\014\074\015\040" +
    "\016\052\017\043\021\062\024\070\033\055\034\076\035" +
    "\042\036\073\040\045\041\056\042\054\043\037\044\051" +
    "\045\061\051\053\052\063\055\077\056\075\057\044\064" +
    "\060\066\066\067\057\072\064\074\065\105\050\106\041" +
    "\001\002\000\104\004\100\005\046\006\047\007\067\010" +
    "\071\014\074\015\040\016\052\017\043\021\062\024\070" +
    "\033\055\034\076\035\042\036\073\040\045\041\056\042" +
    "\054\043\037\044\051\045\061\051\053\052\063\055\077" +
    "\056\075\057\044\064\060\066\066\067\057\072\064\074" +
    "\065\105\050\106\041\001\002\000\104\004\100\005\046" +
    "\006\047\007\067\010\071\014\074\015\040\016\052\017" +
    "\043\021\062\024\070\033\055\034\076\035\042\036\073" +
    "\040\045\041\056\042\054\043\037\044\051\045\061\051" +
    "\053\052\063\055\077\056\075\057\044\064\060\066\066" +
    "\067\057\072\064\074\065\105\050\106\041\001\002\000" +
    "\036\012\uffe9\020\uffe9\022\uffe9\031\uffe9\051\uffe9\054\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\063\uffe9\067\uffe9\070\uffe9\075" +
    "\uffe9\102\uffe9\001\002\000\104\004\100\005\046\006\047" +
    "\007\067\010\071\014\074\015\040\016\052\017\043\021" +
    "\062\024\070\033\055\034\076\035\042\036\073\040\045" +
    "\041\056\042\054\043\037\044\051\045\061\051\053\052" +
    "\063\055\077\056\075\057\044\064\060\066\066\067\057" +
    "\072\064\074\065\105\050\106\041\001\002\000\104\004" +
    "\100\005\046\006\047\007\067\010\071\014\074\015\040" +
    "\016\052\017\043\021\062\024\070\033\055\034\076\035" +
    "\042\036\073\040\045\041\056\042\054\043\037\044\051" +
    "\045\061\051\053\052\063\055\077\056\075\057\044\064" +
    "\060\066\066\067\057\072\064\074\065\105\050\106\041" +
    "\001\002\000\104\004\100\005\046\006\047\007\067\010" +
    "\071\014\074\015\040\016\052\017\043\021\062\024\070" +
    "\033\055\034\076\035\042\036\073\040\045\041\056\042" +
    "\054\043\037\044\051\045\061\051\053\052\063\055\077" +
    "\056\075\057\044\064\060\066\066\067\057\072\064\074" +
    "\065\105\050\106\041\001\002\000\104\004\100\005\046" +
    "\006\047\007\067\010\071\014\074\015\040\016\052\017" +
    "\043\021\062\024\070\033\055\034\076\035\042\036\073" +
    "\040\045\041\056\042\054\043\037\044\051\045\061\051" +
    "\053\052\063\055\077\056\075\057\044\064\060\066\066" +
    "\067\057\072\064\074\065\105\050\106\041\001\002\000" +
    "\104\004\100\005\046\006\047\007\067\010\071\014\074" +
    "\015\040\016\052\017\043\021\062\024\070\033\055\034" +
    "\076\035\042\036\073\040\045\041\056\042\054\043\037" +
    "\044\051\045\061\051\053\052\063\055\077\056\075\057" +
    "\044\064\060\066\066\067\057\072\064\074\065\105\050" +
    "\106\041\001\002\000\042\011\uffbe\012\uffbe\020\uffbe\022" +
    "\uffbe\031\uffbe\032\uffbe\051\uffbe\054\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\067\uffbe\070\uffbe\075\uffbe\102\uffbe\001" +
    "\002\000\042\011\uffbf\012\uffbf\020\uffbf\022\uffbf\031\uffbf" +
    "\032\uffbf\051\uffbf\054\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\067\uffbf\070\uffbf\075\uffbf\102\uffbf\001\002\000\042" +
    "\011\uffc1\012\uffc1\020\uffc1\022\uffc1\031\uffc1\032\uffc1\051" +
    "\uffc1\054\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\067\uffc1" +
    "\070\uffc1\075\uffc1\102\uffc1\001\002\000\042\011\uffc0\012" +
    "\uffc0\020\uffc0\022\uffc0\031\uffc0\032\uffc0\051\uffc0\054\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\067\uffc0\070\uffc0\075" +
    "\uffc0\102\uffc0\001\002\000\042\011\uffc8\012\uffc8\020\uffc8" +
    "\022\uffc8\031\uffc8\032\uffc8\051\uffc8\054\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\067\uffc8\070\uffc8\075\uffc8\102\uffc8" +
    "\001\002\000\042\011\uffca\012\uffca\020\uffca\022\uffca\031" +
    "\uffca\032\uffca\051\uffca\054\uffca\060\uffca\061\uffca\062\uffca" +
    "\063\uffca\067\uffca\070\uffca\075\uffca\102\uffca\001\002\000" +
    "\042\011\uffcc\012\uffcc\020\uffcc\022\uffcc\031\uffcc\032\uffcc" +
    "\051\uffcc\054\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\067" +
    "\uffcc\070\uffcc\075\uffcc\102\uffcc\001\002\000\042\011\uffd8" +
    "\012\uffd8\020\uffd8\022\uffd8\031\uffd8\032\uffd8\051\uffd8\054" +
    "\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\067\uffd8\070\uffd8" +
    "\075\uffd8\102\uffd8\001\002\000\042\011\uffcd\012\uffcd\020" +
    "\uffcd\022\uffcd\031\uffcd\032\uffcd\051\uffcd\054\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\067\uffcd\070\uffcd\075\uffcd\102" +
    "\uffcd\001\002\000\042\011\uffd4\012\uffd4\020\uffd4\022\uffd4" +
    "\031\uffd4\032\uffd4\051\uffd4\054\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\067\uffd4\070\uffd4\075\uffd4\102\uffd4\001\002" +
    "\000\042\011\uffce\012\uffce\020\uffce\022\uffce\031\uffce\032" +
    "\uffce\051\uffce\054\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\067\uffce\070\uffce\075\uffce\102\uffce\001\002\000\042\011" +
    "\uffcb\012\uffcb\020\uffcb\022\uffcb\031\uffcb\032\uffcb\051\uffcb" +
    "\054\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\067\uffcb\070" +
    "\uffcb\075\uffcb\102\uffcb\001\002\000\042\011\uffd0\012\uffd0" +
    "\020\uffd0\022\uffd0\031\uffd0\032\uffd0\051\uffd0\054\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\067\uffd0\070\uffd0\075\uffd0" +
    "\102\uffd0\001\002\000\042\011\uffcf\012\uffcf\020\uffcf\022" +
    "\uffcf\031\uffcf\032\uffcf\051\uffcf\054\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\067\uffcf\070\uffcf\075\uffcf\102\uffcf\001" +
    "\002\000\042\011\uffc3\012\uffc3\020\uffc3\022\uffc3\031\uffc3" +
    "\032\uffc3\051\uffc3\054\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\067\uffc3\070\uffc3\075\uffc3\102\uffc3\001\002\000\042" +
    "\011\uffc2\012\uffc2\020\uffc2\022\uffc2\031\uffc2\032\uffc2\051" +
    "\uffc2\054\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\067\uffc2" +
    "\070\uffc2\075\uffc2\102\uffc2\001\002\000\042\011\uffd3\012" +
    "\uffd3\020\uffd3\022\uffd3\031\uffd3\032\uffd3\051\uffd3\054\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\063\uffd3\067\uffd3\070\uffd3\075" +
    "\uffd3\102\uffd3\001\002\000\042\011\uffc9\012\uffc9\020\uffc9" +
    "\022\uffc9\031\uffc9\032\uffc9\051\uffc9\054\uffc9\060\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\067\uffc9\070\uffc9\075\uffc9\102\uffc9" +
    "\001\002\000\042\011\uffc7\012\uffc7\020\uffc7\022\uffc7\031" +
    "\uffc7\032\uffc7\051\uffc7\054\uffc7\060\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\067\uffc7\070\uffc7\075\uffc7\102\uffc7\001\002\000" +
    "\042\011\uffd1\012\uffd1\020\uffd1\022\uffd1\031\uffd1\032\uffd1" +
    "\051\uffd1\054\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\067" +
    "\uffd1\070\uffd1\075\uffd1\102\uffd1\001\002\000\042\011\uffc4" +
    "\012\uffc4\020\uffc4\022\uffc4\031\uffc4\032\uffc4\051\uffc4\054" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\067\uffc4\070\uffc4" +
    "\075\uffc4\102\uffc4\001\002\000\042\011\uffc5\012\uffc5\020" +
    "\uffc5\022\uffc5\031\uffc5\032\uffc5\051\uffc5\054\uffc5\060\uffc5" +
    "\061\uffc5\062\uffc5\063\uffc5\067\uffc5\070\uffc5\075\uffc5\102" +
    "\uffc5\001\002\000\042\011\uffd7\012\uffd7\020\uffd7\022\uffd7" +
    "\031\uffd7\032\uffd7\051\uffd7\054\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\067\uffd7\070\uffd7\075\uffd7\102\uffd7\001\002" +
    "\000\042\011\uffba\012\uffba\020\uffba\022\uffba\031\uffba\032" +
    "\uffba\051\uffba\054\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\067\uffba\070\uffba\075\uffba\102\uffba\001\002\000\042\011" +
    "\uffc6\012\uffc6\020\uffc6\022\uffc6\031\uffc6\032\uffc6\051\uffc6" +
    "\054\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\067\uffc6\070" +
    "\uffc6\075\uffc6\102\uffc6\001\002\000\042\011\uffd5\012\uffd5" +
    "\020\uffd5\022\uffd5\031\uffd5\032\uffd5\051\uffd5\054\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\067\uffd5\070\uffd5\075\uffd5" +
    "\102\uffd5\001\002\000\042\011\uffd6\012\uffd6\020\uffd6\022" +
    "\uffd6\031\uffd6\032\uffd6\051\uffd6\054\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\067\uffd6\070\uffd6\075\uffd6\102\uffd6\001" +
    "\002\000\042\011\uffd2\012\uffd2\020\uffd2\022\uffd2\031\uffd2" +
    "\032\uffd2\051\uffd2\054\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\067\uffd2\070\uffd2\075\uffd2\102\uffd2\001\002\000\036" +
    "\012\uffe6\020\uffe6\022\uffe6\031\uffe6\051\uffe6\054\uffe6\060" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\067\uffe6\070\uffe6\075\uffe6" +
    "\102\uffe6\001\002\000\004\054\ufff5\001\002\000\004\054" +
    "\ufffb\001\002\000\036\012\uffe7\020\uffe7\022\uffe7\031\uffe7" +
    "\051\uffe7\054\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\067" +
    "\uffe7\070\uffe7\075\uffe7\102\uffe7\001\002\000\004\054\ufffd" +
    "\001\002\000\104\004\100\005\046\006\047\007\067\010" +
    "\071\014\074\015\040\016\052\017\043\021\062\024\070" +
    "\033\055\034\076\035\042\036\073\040\045\041\056\042" +
    "\054\043\037\044\051\045\061\051\053\052\063\055\077" +
    "\056\075\057\044\064\060\066\066\067\057\072\064\074" +
    "\065\105\050\106\041\001\002\000\004\051\143\001\002" +
    "\000\006\011\146\041\145\001\002\000\036\012\uffde\020" +
    "\uffde\022\uffde\031\uffde\051\uffde\054\uffde\060\uffde\061\uffde" +
    "\062\uffde\063\uffde\067\uffde\070\uffde\075\uffde\102\uffde\001" +
    "\002\000\004\051\143\001\002\000\104\004\100\005\046" +
    "\006\047\007\067\010\071\014\074\015\040\016\052\017" +
    "\043\021\062\024\070\033\055\034\076\035\042\036\073" +
    "\040\045\041\056\042\054\043\037\044\051\045\061\051" +
    "\053\052\063\055\077\056\075\057\044\064\060\066\066" +
    "\067\057\072\064\074\065\105\050\106\041\001\002\000" +
    "\036\012\uffdb\020\uffdb\022\uffdb\031\uffdb\051\uffdb\054\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\067\uffdb\070\uffdb\075" +
    "\uffdb\102\uffdb\001\002\000\036\012\uffdc\020\uffdc\022\uffdc" +
    "\031\uffdc\051\uffdc\054\uffdc\060\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\067\uffdc\070\uffdc\075\uffdc\102\uffdc\001\002\000\036" +
    "\012\uffdd\020\uffdd\022\uffdd\031\uffdd\051\uffdd\054\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\067\uffdd\070\uffdd\075\uffdd" +
    "\102\uffdd\001\002\000\004\011\153\001\002\000\104\004" +
    "\100\005\046\006\047\007\067\010\071\014\074\015\040" +
    "\016\052\017\043\021\062\024\070\033\055\034\076\035" +
    "\042\036\073\040\045\041\056\042\054\043\037\044\051" +
    "\045\061\051\053\052\063\055\077\056\075\057\044\064" +
    "\060\066\066\067\057\072\064\074\065\105\050\106\041" +
    "\001\002\000\004\032\155\001\002\000\104\004\100\005" +
    "\046\006\047\007\067\010\071\014\074\015\040\016\052" +
    "\017\043\021\062\024\070\033\055\034\076\035\042\036" +
    "\073\040\045\041\056\042\054\043\037\044\051\045\061" +
    "\051\053\052\063\055\077\056\075\057\044\064\060\066" +
    "\066\067\057\072\064\074\065\105\050\106\041\001\002" +
    "\000\036\012\uffea\020\uffea\022\uffea\031\uffea\051\uffea\054" +
    "\uffea\060\uffea\061\uffea\062\uffea\063\uffea\067\uffea\070\uffea" +
    "\075\uffea\102\uffea\001\002\000\036\012\uffec\020\uffec\022" +
    "\uffec\031\uffec\051\uffec\054\uffec\060\uffec\061\uffec\062\uffec" +
    "\063\uffec\067\uffec\070\uffec\075\uffec\102\uffec\001\002\000" +
    "\004\054\ufff7\001\002\000\004\054\uffff\001\002\000\004" +
    "\002\000\001\002\000\004\054\ufff3\001\002\000\036\012" +
    "\uffe5\020\uffe5\022\uffe5\031\uffe5\051\uffe5\054\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\067\uffe5\070\uffe5\075\uffe5\102" +
    "\uffe5\001\002\000\004\054\uffef\001\002\000\006\025\170" +
    "\041\167\001\002\000\004\051\174\001\002\000\004\047" +
    "\171\001\002\000\004\037\172\001\002\000\104\004\100" +
    "\005\046\006\047\007\067\010\071\014\074\015\040\016" +
    "\052\017\043\021\062\024\070\033\055\034\076\035\042" +
    "\036\073\040\045\041\056\042\054\043\037\044\051\045" +
    "\061\051\053\052\063\055\077\056\075\057\044\064\060" +
    "\066\066\067\057\072\064\074\065\105\050\106\041\001" +
    "\002\000\036\012\uffe1\020\uffe1\022\uffe1\031\uffe1\051\uffe1" +
    "\054\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\067\uffe1\070" +
    "\uffe1\075\uffe1\102\uffe1\001\002\000\006\025\177\041\176" +
    "\001\002\000\036\012\uffe2\020\uffe2\022\uffe2\031\uffe2\051" +
    "\uffe2\054\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\067\uffe2" +
    "\070\uffe2\075\uffe2\102\uffe2\001\002\000\004\051\174\001" +
    "\002\000\004\047\200\001\002\000\004\037\201\001\002" +
    "\000\104\004\100\005\046\006\047\007\067\010\071\014" +
    "\074\015\040\016\052\017\043\021\062\024\070\033\055" +
    "\034\076\035\042\036\073\040\045\041\056\042\054\043" +
    "\037\044\051\045\061\051\053\052\063\055\077\056\075" +
    "\057\044\064\060\066\066\067\057\072\064\074\065\105" +
    "\050\106\041\001\002\000\036\012\uffdf\020\uffdf\022\uffdf" +
    "\031\uffdf\051\uffdf\054\uffdf\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\067\uffdf\070\uffdf\075\uffdf\102\uffdf\001\002\000\036" +
    "\012\uffe0\020\uffe0\022\uffe0\031\uffe0\051\uffe0\054\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\067\uffe0\070\uffe0\075\uffe0" +
    "\102\uffe0\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\002\003\001\001\000\002\001\001\000" +
    "\026\003\012\005\021\010\023\011\013\015\014\016\026" +
    "\017\011\020\031\021\006\024\033\001\001\000\002\001" +
    "\001\000\026\003\164\005\021\010\023\011\013\015\014" +
    "\016\026\017\011\020\031\021\006\024\033\001\001\000" +
    "\002\001\001\000\004\023\163\001\001\000\026\003\162" +
    "\005\021\010\023\011\013\015\014\016\026\017\011\020" +
    "\031\021\006\024\033\001\001\000\002\001\001\000\026" +
    "\003\160\005\021\010\023\011\013\015\014\016\026\017" +
    "\011\020\031\021\006\024\033\001\001\000\026\003\157" +
    "\005\021\010\023\011\013\015\014\016\026\017\011\020" +
    "\031\021\006\024\033\001\001\000\004\023\156\001\001" +
    "\000\004\023\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\137\005\021\010\023\011\013\015\014" +
    "\016\026\017\011\020\031\021\006\024\033\001\001\000" +
    "\004\023\136\001\001\000\026\003\135\005\021\010\023" +
    "\011\013\015\014\016\026\017\011\020\031\021\006\024" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\134\005\021\010\023\011\013\015\014\016\026\017" +
    "\011\020\031\021\006\024\033\001\001\000\004\023\133" +
    "\001\001\000\004\023\071\001\001\000\026\003\035\005" +
    "\021\010\023\011\013\015\014\016\026\017\011\020\031" +
    "\021\006\024\033\001\001\000\002\001\001\000\026\003" +
    "\034\005\021\010\023\011\013\015\014\016\026\017\011" +
    "\020\031\021\006\024\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\132\001\001\000\004\023\131" +
    "\001\001\000\002\001\001\000\004\023\130\001\001\000" +
    "\004\023\127\001\001\000\004\023\126\001\001\000\004" +
    "\023\125\001\001\000\004\023\124\001\001\000\004\023" +
    "\123\001\001\000\002\001\001\000\004\023\122\001\001" +
    "\000\004\023\121\001\001\000\004\023\120\001\001\000" +
    "\004\023\117\001\001\000\004\023\116\001\001\000\004" +
    "\023\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\114\001\001\000\004\023\113\001\001\000\004" +
    "\023\112\001\001\000\002\001\001\000\004\023\111\001" +
    "\001\000\004\023\110\001\001\000\004\023\107\001\001" +
    "\000\004\023\106\001\001\000\004\023\105\001\001\000" +
    "\002\001\001\000\004\023\104\001\001\000\004\023\103" +
    "\001\001\000\004\023\102\001\001\000\004\023\101\001" +
    "\001\000\004\023\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\150" +
    "\001\001\000\004\006\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\147\001\001\000\004\023\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\153\001\001\000\002" +
    "\001\001\000\004\023\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
     
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
  public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

 public int contador=1;
public int contadorelif=1;
public int contadorsegun=0;
  public String tab="";
public boolean verswitch,ifbo=false;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= INICIO SENTENCIA FIN 
            {
              Object RESULT =null;
		   System.out.println(Ventana.python);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION SENTENCIA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= ASIGNACION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IMPRESIONES SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IMPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= COMENTARIO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= CONDICIONAL_IF SENTENCIA 
            {
              Object RESULT =null;
		



System.out.println(Ventana.python);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= CONDICIONAL_IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= CONDICIONAL_MULTIPLE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= CONDICIONAL_MULTIPLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= CONDICIONAL_FOR SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= CONDICIONAL_FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= CONDICIONAL_WHILE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= CONDICIONAL_WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= CONDICIONAL_DOWHILE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= CONDICIONAL_DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONDICIONAL_DOWHILE ::= Repetir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_DOWHILE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONDICIONAL_WHILE ::= Mientras EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador==1){
tab="";
Ventana.python=Ventana.python+tab;
tab="   ";
}else{
    Ventana.python=Ventana.python+tab;
    tab="";
 for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

contador=contador+1;
Ventana.python=Ventana.python+"while ("+a+"):"+"\n";



              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONDICIONAL_WHILE ::= Fin_mientras 
            {
              Object RESULT =null;
		
 if(contador==1){
tab="";
}else{ 
contador=contador-1;
tab="";
       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONDICIONAL_FOR ::= Para EXPRESION FLECHA EXPRESION Hasta EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.python=Ventana.python+"for "+a;
contador=contador+1;

for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}



              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONDICIONAL_MULTIPLE ::= Segun EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

System.out.println("entroooooo");



System.out.println(a);




System.out.println(Ventana.python);


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_MULTIPLE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONDICIONAL_MULTIPLE ::= Fin_segun 
            {
              Object RESULT =null;
		
if(contador==1){

}else{
contador=contador-1;
}
if(contadorsegun==-1){
verswitch=false;
}

    if(contador==1){
tab="";
}else{ 

tab="";
       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_MULTIPLE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONDICIONAL_MULTIPLE ::= interc EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
contadorsegun=contadorsegun+1;
if(contador==1){ 

     tab="";
Ventana.python=Ventana.python+tab;

for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}

else {

Ventana.python=Ventana.python+tab;
tab="";

       for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}
contador=contador+1;
if(verswitch==false){
verswitch=true;
Ventana.python=Ventana.python+"if "+a+":"+"\n";
}else{
Ventana.python=Ventana.python+"elif "+a+":"+"\n";
}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_MULTIPLE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONDICIONAL_IF ::= Condicional_si EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if (contador==1){
tab="";
Ventana.python=Ventana.python+tab;
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}


}else{
Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}

}



contador=contador+1;
Ventana.python=Ventana.python+"if "+a+":"+"\n";
System.out.println(Ventana.python);


 


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDICIONAL_IF ::= O_si EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador==2){

tab="";

Ventana.python=Ventana.python+tab;
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}

}else{
Ventana.python=Ventana.python+tab;
tab="";
for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   
}
}


contador=contador+1;
Ventana.python=Ventana.python+"elif "+a+":"+"\n";
System.out.println(Ventana.python);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDICIONAL_IF ::= Fin_osi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
contador=contador-1;
tab="";
if(contador==2){
tab="   ";

}else{

for (int i = 0; i < contador; i++) {
            tab=tab+"   ";   


}



}

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDICIONAL_IF ::= Fin_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

if(contador==1){
tab="";
ifbo=false;
}else{
if(ifbo==true){
contador=contador+1;
}
contador=contador-2;
tab="";
ifbo=true;
for (int i = 0; i <contador; i++) {
            tab=tab+"   ";   
}
}

   

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= INGRESAR iDENTIFICADOR COMA DECLARACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

Ventana.python=Ventana.python+tab+a+","+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= INGRESAR iDENTIFICADOR COMO T_dato CON_VALOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		




Ventana.python=Ventana.python+tab+a+"="+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION1 ::= iDENTIFICADOR COMA DECLARACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+","+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION1",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION1 ::= iDENTIFICADOR COMO T_dato CON_VALOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

a=a+"="+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION1",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= iDENTIFICADOR COMA ASIGNACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

Ventana.python=Ventana.python+tab+a+","+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= iDENTIFICADOR FLECHA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
Ventana.python=Ventana.python+tab+a+"="+b+"\n";


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION1 ::= iDENTIFICADOR COMA ASIGNACION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+","+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION1 ::= iDENTIFICADOR FLECHA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

a=a+"="+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION1",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= cM_MULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= cM_LINE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= ENTERO EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= Op_booleano EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= MENOS EXPRESION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String a="-"+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= DECIMAL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= Modulo EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= Mayorigual EXPRESION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa=">="+b;
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= menorigual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="<="+b;
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= esiGual EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="=="+b;
System.out.println(aa);
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= intera EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="";
System.out.println(aa);
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= esdifeErente EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
String aa="!="+b;
RESULT=aa;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= Potencia EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= CORIZQ EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= CORDER EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= cADENA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= cHAR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= iDENTIFICADOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= MAS EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= POR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= DIVIDIDO EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= PARIZQ EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= PARDER EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= COMA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= menor EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= mayor EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= admiracionb EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= admiraciona EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=a+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= PTCOMA 
            {
              Object RESULT =null;
		
String b="";
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= Entonces 
            {
              Object RESULT =null;
		
String b="";
System.out.println("llego");
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= Hacer 
            {
              Object RESULT =null;
		
String b="";
System.out.println("llegox2");
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= Fin_si 
            {
              Object RESULT =null;
		
String b="";
System.out.println("llego");
RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= andd EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
a=" "+"and "+b;
RESULT=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
